<haxe>
	<class path="neko.Lib" params="" file="/usr/share/haxe/std/neko/Lib.hx">
		<load public="1" set="method" line="34" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Load and return a Neko primitive from a NDLL library.</haxe_doc>
		</load>
		<haxe_doc>Platform-specific Neko Library. Provides some platform-specific functions 
	for the Neko target, such as conversion from Haxe types to native types 
	and vice-versa.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Array" params="T" file="/usr/share/haxe/std/neko/_std/Array.hx">
		<new1 params="T" set="method" line="32" static="1"><f a="a:l">
	<c path="neko.NativeArray"><c path="new1.T"/></c>
	<x path="Int"/>
	<c path="Array"><c path="new1.T"/></c>
</f></new1>
		<__a><c path="neko.NativeArray"><c path="Array.T"/></c></__a>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method" line="39">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<copy public="1" set="method" line="50">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<insert public="1" set="method" line="69">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<join public="1" set="method" line="82">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<toString public="1" set="method" line="94">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<pop public="1" set="method" line="107">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method" line="116">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<unshift public="1" set="method" line="123">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<remove public="1" set="method" line="131">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method" line="148">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="165">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<reverse public="1" set="method" line="182">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method" line="196">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method" line="209">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method" line="226">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method" line="249">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is 
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<map public="1" params="S" set="method" line="272">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method" line="279">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<__get set="method" line="290"><f a="pos">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="294"><f a="pos:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__grow set="method" line="315"><f a="l">
	<x path="Int"/>
	<x path="Void"/>
</f></__grow>
		<__neko set="method" line="330"><f a=""><c path="neko.NativeArray"><c path="Array.T"/></c></f></__neko>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/share/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/share/haxe/std/neko/_std/Date.hx">
		<date_format line="93" static="1"><f a=":">
	<d/>
	<unknown/>
	<c path="String"/>
</f></date_format>
		<__string set="method" line="101" static="1">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
		</__string>
		<__t><d/></__t>
		<toString public="1" set="method" line="65">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/share/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/share/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="List" params="T" file="/usr/share/haxe/std/List.hx">
		<h><c path="_List.ListNode"><c path="List.T"/></c></h>
		<q><c path="_List.ListNode"><c path="List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<push public="1" set="method" line="67">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="_List.ListIterator"><c path="List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<new public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="neko.NativeArray" params="T" file="/usr/share/haxe/std/neko/NativeArray.hx"><meta><m n=":keep"/></meta></class>
	<class path="_List.ListNode" params="T" file="/usr/share/haxe/std/List.hx" private="1" module="List" extern="1">
		<extends path="neko.NativeArray"><d/></extends>
		<create public="1" params="T" get="inline" set="null" line="247" static="1">
			<f a="item:next">
				<c path="create.T"/>
				<c path="_List.ListNode"><c path="create.T"/></c>
				<c path="_List.ListNode"><c path="create.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</create>
		<item public="1" get="accessor" set="accessor"><c path="_List.ListNode.T"/></item>
		<next public="1" get="accessor" set="accessor"><c path="_List.ListNode"><c path="_List.ListNode.T"/></c></next>
		<get_item get="inline" set="null" line="243"><f a=""><c path="_List.ListNode.T"/></f></get_item>
		<set_item get="inline" set="null" line="244"><f a="v">
	<c path="_List.ListNode.T"/>
	<c path="_List.ListNode.T"/>
</f></set_item>
		<get_next get="inline" set="null" line="245"><f a=""><c path="_List.ListNode"><c path="_List.ListNode.T"/></c></f></get_next>
		<set_next get="inline" set="null" line="246"><f a="v">
	<c path="_List.ListNode"><c path="_List.ListNode.T"/></c>
	<c path="_List.ListNode"><c path="_List.ListNode.T"/></c>
</f></set_next>
	</class>
	<class path="_List.ListIterator" params="T" file="/usr/share/haxe/std/List.hx" private="1" module="List">
		<head><c path="_List.ListNode"><c path="_List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="272"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="276"><f a=""><c path="_List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="268"><f a="head">
	<c path="_List.ListNode"><c path="_List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="Map" params="K:V" file="/usr/share/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/usr/share/haxe/std/Map.hx" private="1" module="Map"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<typedef path="IMap" params="K:V" file="/usr/share/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="_Math.MathImpl" params="" file="/usr/share/haxe/std/neko/_std/Math.hx" private="1" module="Math">
		<__rnd static="1"><unknown/></__rnd>
		<_rand_float line="28" static="1"><f a="">
	<unknown/>
	<x path="Float"/>
</f></_rand_float>
		<_rand_int line="29" static="1"><unknown/></_rand_int>
		<min public="1" set="method" line="31" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</min>
		<max public="1" set="method" line="32" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</max>
		<random public="1" set="method" line="33" static="1"><f a=""><x path="Float"/></f></random>
		<isNaN public="1" set="method" line="34" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isNaN>
		<isFinite public="1" set="method" line="35" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isFinite>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Math"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="Math" params="" file="/usr/share/haxe/std/neko/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see <https://bugs.php.net/bug.php?id=42143>]]></haxe_doc>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<fround public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<ffloor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/usr/share/haxe/std/neko/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Int" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="neko.Boot" params="" file="/usr/share/haxe/std/neko/Boot.hx">
		<__tmp_str set="method" line="28" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</__tmp_str>
		<__enum_str set="method" line="32" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__enum_str>
		<__interfLoop set="method" line="54" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="70" static="1">
			<f a="o:cl">
				<a>
					<__name__ set="null"><unknown/></__name__>
					<__enum__ set="null"><t path="Abstract&lt;Dynamic&gt;"/></__enum__>
					<__ename__ set="null"><unknown/></__ename__>
					<__class__ set="null"><unknown/></__class__>
				</a>
				<t path="Abstract&lt;Dynamic&gt;"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"typed_catch"</e></m>
			</meta>
		</__instanceof>
		<__serialize set="method" line="88" static="1">
			<f a="o">
				<a>
					<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
					<__class__ set="null"><a><__name__ set="null"><a><length set="null"><x path="Int"/></length></a></__name__></a></__class__>
				</a>
				<c path="Array"><unknown/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__serialize>
		<__tagserialize set="method" line="108" static="1">
			<f a="o">
				<a>
					<tag set="null"><unknown/></tag>
					<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
				</a>
				<c path="Array"><unknown/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__tagserialize>
		<__unserialize set="method" line="117" static="1">
			<f a="v">
				<c path="Array"><unknown/></c>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__unserialize>
		<__init set="method" line="140" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</__init>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/share/haxe/std/neko/_std/Std.hx">
		<is public="1" set="method" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"typed_cast"</e></m>
			</meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="37" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see https://haxe.org/manual/types-nullability.html</haxe_doc>
	</typedef>
	<typedef path="Iterator" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/usr/share/haxe/std/neko/_std/String.hx">
		<__is_String static="1"><x path="Bool"/></__is_String>
		<__split line="25" static="1"><d/></__split>
		<fromCharCode public="1" set="method" line="199" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="42">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="54">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="60">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="69">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method" line="83">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method" line="99">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="125">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toLowerCase public="1" set="method" line="149">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method" line="165">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toString public="1" set="method" line="181">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<__compare set="method" line="187">
			<f a="o">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__compare>
		<__add set="method" line="191">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__add>
		<__radd set="method" line="195">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__radd>
		<new public="1" set="method" line="33">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/usr/share/haxe/std/neko/_std/StringBuf.hx">
		<__make line="52" static="1"><d/></__make>
		<__add line="53" static="1"><d/></__add>
		<__add_char line="54" static="1"><d/></__add_char>
		<__to_string line="56" static="1"><d/></__to_string>
		<b><d/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/share/haxe/std/StringTools.hx">
		<endsWith public="1" set="method" line="211" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Sys" params="" file="/usr/share/haxe/std/neko/_std/Sys.hx">
		<sleep public="1" set="method" line="74" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspend the current execution for the given time (in seconds).</haxe_doc>
		</sleep>
		<time public="1" set="method" line="116" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value (in seconds).</haxe_doc>
		</time>
		<_sleep line="150" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></_sleep>
		<sys_time line="157" static="1"><f a=""><x path="Float"/></f></sys_time>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in `sys` sub packages for more system APIs.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Type" params="" file="/usr/share/haxe/std/neko/_std/Type.hx">
		<createEmptyInstance public="1" params="T" set="method" line="112" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="awe.Archetype" params="" file="src/awe/Archetype.hx">
		<defaults><c path="Array"><f a=""><c path="awe.Component"/></f></c></defaults>
		<cid><c path="de.polygonal.ds.BitVector"/></cid>
		<create public="1" set="method" line="37">
			<f a="world">
				<c path="awe.World"/>
				<x path="awe.Entity"/>
			</f>
			<haxe_doc>Create a single `Entity`, using this `Archetype` as a template.
		@param world The world to create the entities in.
		@return The entity created.</haxe_doc>
		</create>
		<createSome public="1" set="method" line="60">
			<f a="world:count">
				<c path="awe.World"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><x path="awe.Entity"/></c>
			</f>
			<haxe_doc>Create multiple entities at once, using this `Archetype` as a template.
		@param world The world to create the entities in.
		@param count How many entities will be created.
		@return The list of entities created.</haxe_doc>
		</createSome>
		<new public="1" set="method" line="28">
			<f a="cid:defaults">
				<c path="de.polygonal.ds.BitVector"/>
				<c path="Array"><f a=""><c path="awe.Component"/></f></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `Archetype` instance based on its composition and component
		defaults.
		@param cid The composition.
		@param defaults A list of functions that create components.</haxe_doc>
		</new>
		<haxe_doc>Blueprints for fast construction of `Entity`s.

	This can be constructed by using the `Archetype.build` macro, or by calling
	the constructor with the composition and component defaults.</haxe_doc>
	</class>
	<class path="awe.IAspect" params="" file="src/awe/Aspect.hx" module="awe.Aspect" interface="1">
		<matches public="1" set="method">
			<f a="components">
				<c path="de.polygonal.ds.BitVector"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the `components` set fulfills this aspect.
		@param components The `BitVector` of components to check against.
		@return If the `components` set fulfills this aspect.</haxe_doc>
		</matches>
		<haxe_doc>A generic Aspect base.</haxe_doc>
	</class>
	<class path="awe.AnyAspect" params="" file="src/awe/Aspect.hx" module="awe.Aspect">
		<implements path="awe.IAspect"/>
		<matches public="1" get="inline" set="null" line="31"><f a="components">
	<c path="de.polygonal.ds.BitVector"/>
	<x path="Bool"/>
</f></matches>
		<new public="1" get="inline" set="null" line="30"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Matches any combo of components.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.Aspect" params="" file="src/awe/Aspect.hx">
		<implements path="awe.IAspect"/>
		<any public="1" get="inline" set="null" line="84" static="1">
			<f a=""><c path="awe.AnyAspect"/></f>
			<haxe_doc>Matches any combo of components.
		@return The aspect.</haxe_doc>
		</any>
		<allSet set="null"><c path="de.polygonal.ds.BitVector"/></allSet>
		<oneSet set="null"><c path="de.polygonal.ds.BitVector"/></oneSet>
		<noneSet set="null"><c path="de.polygonal.ds.BitVector"/></noneSet>
		<toString public="1" set="method" line="135">
			<f a=""><c path="String"/></f>
			<haxe_doc>Make a string representation of this aspect.
		@return The string representation.</haxe_doc>
		</toString>
		<matches public="1" set="method" line="142">
			<f a="components">
				<c path="de.polygonal.ds.BitVector"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the `components` set fulfills this aspect.
		@param components The `BitVector` of components to check against.
		@return If the `components` set fulfills this aspect.</haxe_doc>
		</matches>
		<new public="1" set="method" line="75">
			<f a="allSet:oneSet:noneSet">
				<c path="de.polygonal.ds.BitVector"/>
				<c path="de.polygonal.ds.BitVector"/>
				<c path="de.polygonal.ds.BitVector"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new aspect from bit vectors.
		@param allSet The components to require all of.
		@param oneSet The components to require at least one of.
		@param noneSet The components to require none of.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[An aspect for matching entities' components against. This is used to check
	if a system is interested in processing an entity.

	This can be constructed by using the `Aspect.build(_)` macro.
	Using this, you can build a aspect from a binary operation representing
	the combination of types this will expect.

	### Binary Syntax

	#### All of...
	```haxe
	Aspect.build(Position & Velocity);
	```
	#### One of...
	```haxe
	Aspect.build(Position | Velocity);
	```
	#### None of...
	```haxe
	Aspect.build(!Position);
	```

	### Alternate syntax
	```haxe
	Aspect.build({
		all: [Position, Velocity, Gravity, Physical],
		none: Frozen
	})
	```]]></haxe_doc>
	</class>
	<typedef path="awe.MType" params="" file="src/awe/Component.hx" module="awe.Component"><e path="haxe.macro.Type"/></typedef>
	<class path="awe.Component" params="" file="src/awe/Component.hx" interface="1">
		<getType public="1" set="method">
			<f a=""><x path="awe.ComponentType"/></f>
			<haxe_doc>Retrieve the component type for this component. This can be used to
		determine how the component is stored. 
		@return The component type.</haxe_doc>
		</getType>
		<haxe_doc>Raw data to be attached to an `Entity`. Should contain absolutely no logic
	and should be serializable. This will be automatically pooled or packed.</haxe_doc>
		<meta>
			<m n=":autoBuild"><e>awe.Component.AutoComponent.from()</e></m>
			<m n=":keepSub"/>
		</meta>
	</class>
	<class path="awe.AutoComponent" params="" file="src/awe/Component.hx" module="awe.Component"/>
	<class path="awe.IComponentList" params="T" file="src/awe/ComponentList.hx" module="awe.ComponentList" interface="1">
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_length>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>* The number of entities stored in this list.</haxe_doc>
		</length>
		<initialize public="1" set="method">
			<f a="world">
				<c path="awe.World"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Setup this component list inside the `world`.
		This must be ran before other methods are called.
	 *  @param world The world to initialize this in.</haxe_doc>
		</initialize>
		<get public="1" set="method">
			<f a="id">
				<x path="awe.Entity"/>
				<t path="Null"><c path="awe.IComponentList.T"/></t>
			</f>
			<haxe_doc>Retrieve the component corresponding associated to the ID.
		@param id The `Entity` to retrieve the component for.
		@return The component.</haxe_doc>
		</get>
		<add public="1" set="method">
			<f a="id:value">
				<x path="awe.Entity"/>
				<c path="awe.IComponentList.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the component to this list with the given ID.
		@param id The `Entity` to add a component to.</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="id">
				<x path="awe.Entity"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the component corresponding to the ID given.
		@param id The `Entity` to remove from this list.</haxe_doc>
		</remove>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="awe.ComponentListItem"><c path="awe.IComponentList.T"/></c></t></f>
			<haxe_doc>Iterate through the items in this list.
		@return The iterator for this list.</haxe_doc>
		</iterator>
		<haxe_doc>Represents a list of components.</haxe_doc>
	</class>
	<class path="awe.ComponentList" params="T" file="src/awe/ComponentList.hx">
		<implements path="awe.IComponentList"><c path="awe.ComponentList.T"/></implements>
		<data><c path="de.polygonal.ds.ArrayList"><c path="awe.ComponentList.T"/></c></data>
		<world><c path="awe.World"/></world>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length get="inline" set="null" line="70"><f a=""><x path="Int"/></f></get_length>
		<initialize public="1" get="inline" set="null" line="75"><f a="world">
	<c path="awe.World"/>
	<x path="Void"/>
</f></initialize>
		<get public="1" get="inline" set="null" line="78"><f a="entity">
	<x path="awe.Entity"/>
	<t path="Null"><c path="awe.ComponentList.T"/></t>
</f></get>
		<add public="1" get="inline" set="null" line="81"><f a="entity:value">
	<x path="awe.Entity"/>
	<c path="awe.ComponentList.T"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" line="84"><f a="entity">
	<x path="awe.Entity"/>
	<x path="Void"/>
</f></remove>
		<iterator public="1" get="inline" set="null" line="90"><f a=""><c path="awe.ComponentListIterator"><c path="awe.ComponentList.T"/></c></f></iterator>
		<new public="1" get="inline" set="null" line="72"><f a="?capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="awe.ComponentListItem" params="T" file="src/awe/ComponentList.hx" module="awe.ComponentList">
		<index public="1" set="null"><x path="awe.Entity"/></index>
		<component public="1" set="null"><c path="awe.ComponentListItem.T"/></component>
		<new public="1" set="method" line="122"><f a="index:component">
	<x path="awe.Entity"/>
	<c path="awe.ComponentListItem.T"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.ComponentListIterator" params="T" file="src/awe/ComponentList.hx" module="awe.ComponentList">
		<list><c path="awe.IComponentList"><c path="awe.ComponentListIterator.T"/></c></list>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="136"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="139"><f a=""><c path="awe.ComponentListItem"><c path="awe.ComponentListIterator.T"/></c></f></next>
		<new public="1" set="method" line="133"><f a="list">
	<c path="awe.IComponentList"><c path="awe.ComponentListIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.PackedComponentList" params="T" file="src/awe/ComponentList.hx" module="awe.ComponentList">
		<implements path="awe.IComponentList"><c path="awe.PackedComponentList.T"/></implements>
		<_length><x path="Int"/></_length>
		<buffer><t path="awe.PackedComponent"/></buffer>
		<bytes><c path="haxe.io.Bytes"/></bytes>
		<size><x path="Int"/></size>
		<world><c path="awe.World"/></world>
		<ctype><x path="awe.ComponentType"/></ctype>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length get="inline" set="null" line="159"><f a=""><x path="Int"/></f></get_length>
		<initialize public="1" get="inline" set="null" line="173"><f a="world">
	<c path="awe.World"/>
	<x path="Void"/>
</f></initialize>
		<get public="1" set="method" line="185"><f a="entity">
	<x path="awe.Entity"/>
	<t path="Null"><c path="awe.PackedComponentList.T"/></t>
</f></get>
		<add public="1" set="method" line="190"><f a="entity:value">
	<x path="awe.Entity"/>
	<c path="awe.PackedComponentList.T"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" line="206"><f a="entity">
	<x path="awe.Entity"/>
	<x path="Void"/>
</f></remove>
		<iterator public="1" get="inline" set="null" line="225"><f a=""><c path="awe.ComponentListIterator"><c path="awe.PackedComponentList.T"/></c></f></iterator>
		<new public="1" set="method" line="162"><f a="ctype:?capacity:?size">
	<x path="awe.ComponentType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="awe.ComponentType" params="" file="src/awe/ComponentType.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>Uniquely identifies every kind of component.</haxe_doc>
		<impl><class path="awe._ComponentType.ComponentType_Impl_" params="" file="src/awe/ComponentType.hx" private="1" module="awe.ComponentType">
	<PACKED_FLAG public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></PACKED_FLAG>
	<EMPTY_FLAG public="1" get="inline" set="null" line="43" static="1"><x path="Int"/></EMPTY_FLAG>
	<isEmpty public="1" get="inline" set="null" line="48" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if this component is marked as empty.
	  	@return If this component is marked empty.</haxe_doc>
	</isEmpty>
	<isPacked public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if this component is marked as packed.
		@return If this component is marked packed.</haxe_doc>
	</isPacked>
	<getPure public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="awe.ComponentType"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the component type free of markers.
		@return The pure component type.</haxe_doc>
	</getPure>
	<eq get="inline" set="null" line="65" static="1">
		<f a="a:b">
			<x path="awe.ComponentType"/>
			<x path="awe.ComponentType"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</eq>
	<neq get="inline" set="null" line="70" static="1">
		<f a="a:b">
			<x path="awe.ComponentType"/>
			<x path="awe.ComponentType"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</neq>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="awe._ComponentType.ComponentType_Impl_" params="" file="src/awe/ComponentType.hx" private="1" module="awe.ComponentType">
		<PACKED_FLAG public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></PACKED_FLAG>
		<EMPTY_FLAG public="1" get="inline" set="null" line="43" static="1"><x path="Int"/></EMPTY_FLAG>
		<isEmpty public="1" get="inline" set="null" line="48" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if this component is marked as empty.
	  	@return If this component is marked empty.</haxe_doc>
		</isEmpty>
		<isPacked public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if this component is marked as packed.
		@return If this component is marked packed.</haxe_doc>
		</isPacked>
		<getPure public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="awe.ComponentType"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the component type free of markers.
		@return The pure component type.</haxe_doc>
		</getPure>
		<eq get="inline" set="null" line="65" static="1">
			<f a="a:b">
				<x path="awe.ComponentType"/>
				<x path="awe.ComponentType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</eq>
		<neq get="inline" set="null" line="70" static="1">
			<f a="a:b">
				<x path="awe.ComponentType"/>
				<x path="awe.ComponentType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</neq>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="awe.Entity" params="" file="src/awe/Entity.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>Reperesents a single thing in a `World`.</haxe_doc>
		<impl><class path="awe._Entity.Entity_Impl_" params="" file="src/awe/Entity.hx" private="1" module="awe.Entity">
	<id public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The identifier of this entity.</haxe_doc>
	</id>
	<get_id get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_id>
	<insertIntoSubscriptions set="method" line="23" static="1">
		<f a="this:world">
			<x path="Int"/>
			<c path="awe.World"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":allow"><e>awe</e></m>
		</meta>
	</insertIntoSubscriptions>
	<removeFromSubscriptions set="method" line="28" static="1">
		<f a="this:world">
			<x path="Int"/>
			<c path="awe.World"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</removeFromSubscriptions>
	<_new public="1" set="method" line="37" static="1">
		<f a="world">
			<c path="awe.World"/>
			<x path="awe.Entity"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Construct a new, empty entity inside the world.
		@param world The world to make the entity inside.</haxe_doc>
	</_new>
	<delete public="1" set="method" line="47" static="1">
		<f a="this:world">
			<x path="Int"/>
			<c path="awe.World"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Delete this entity from the world.
		@param world The world to delete this entity from.</haxe_doc>
	</delete>
	<getComposition public="1" get="inline" set="null" line="57" static="1">
		<f a="this:world">
			<x path="Int"/>
			<c path="awe.World"/>
			<c path="de.polygonal.ds.BitVector"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Finds the composition bits of this entity.
		@param world The world that this `Entity` is contained in.
		@return The composition bits.</haxe_doc>
	</getComposition>
	<add public="1" params="T" set="method" line="77" static="1">
		<f a="world:value">
			<c path="awe.World"/>
			<c path="add.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Add the component to the `World`, and attach it to this entity.
		@param world The world this entity is in.
		@param value The component to attach to this entity.</haxe_doc>
	</add>
	<get public="1" params="T" set="method" line="84" static="1">
		<f a="world:kind">
			<c path="awe.World"/>
			<x path="Class"><c path="get.T"/></x>
			<t path="Null"><c path="get.T"/></t>
		</f>
		<haxe_doc>Retrieve the component attached to this entity from the `World`.
		@param world The world this entity is in.
		@param kind The component type to find.
		@return The component of the type given.</haxe_doc>
	</get>
	<toString public="1" get="inline" set="null" line="116" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the string representation of this data.</haxe_doc>
	</toString>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":final"/>
	</meta>
</class></impl>
	</abstract>
	<class path="awe._Entity.Entity_Impl_" params="" file="src/awe/Entity.hx" private="1" module="awe.Entity">
		<id public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The identifier of this entity.</haxe_doc>
		</id>
		<get_id get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_id>
		<insertIntoSubscriptions set="method" line="23" static="1">
			<f a="this:world">
				<x path="Int"/>
				<c path="awe.World"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":allow"><e>awe</e></m>
			</meta>
		</insertIntoSubscriptions>
		<removeFromSubscriptions set="method" line="28" static="1">
			<f a="this:world">
				<x path="Int"/>
				<c path="awe.World"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</removeFromSubscriptions>
		<_new public="1" set="method" line="37" static="1">
			<f a="world">
				<c path="awe.World"/>
				<x path="awe.Entity"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Construct a new, empty entity inside the world.
		@param world The world to make the entity inside.</haxe_doc>
		</_new>
		<delete public="1" set="method" line="47" static="1">
			<f a="this:world">
				<x path="Int"/>
				<c path="awe.World"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Delete this entity from the world.
		@param world The world to delete this entity from.</haxe_doc>
		</delete>
		<getComposition public="1" get="inline" set="null" line="57" static="1">
			<f a="this:world">
				<x path="Int"/>
				<c path="awe.World"/>
				<c path="de.polygonal.ds.BitVector"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Finds the composition bits of this entity.
		@param world The world that this `Entity` is contained in.
		@return The composition bits.</haxe_doc>
		</getComposition>
		<add public="1" params="T" set="method" line="77" static="1">
			<f a="world:value">
				<c path="awe.World"/>
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the component to the `World`, and attach it to this entity.
		@param world The world this entity is in.
		@param value The component to attach to this entity.</haxe_doc>
		</add>
		<get public="1" params="T" set="method" line="84" static="1">
			<f a="world:kind">
				<c path="awe.World"/>
				<x path="Class"><c path="get.T"/></x>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>Retrieve the component attached to this entity from the `World`.
		@param world The world this entity is in.
		@param kind The component type to find.
		@return The component of the type given.</haxe_doc>
		</get>
		<toString public="1" get="inline" set="null" line="116" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the string representation of this data.</haxe_doc>
		</toString>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="awe.SubscriptionListener" params="" file="src/awe/EntitySubscription.hx" module="awe.EntitySubscription" interface="1">
		<inserted public="1" set="method">
			<f a="entities">
				<c path="Array"><x path="awe.Entity"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when entities are inserted that match the aspect.
        @param entities The newly inserted entities.</haxe_doc>
		</inserted>
		<removed public="1" set="method">
			<f a="entities">
				<c path="Array"><x path="awe.Entity"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when entities are removed that match the aspect.
        @param entities The removed entities.</haxe_doc>
		</removed>
		<haxe_doc>Subscribes to entities being inserted and removed.</haxe_doc>
	</class>
	<class path="awe.EntitySubscription" params="" file="src/awe/EntitySubscription.hx">
		<aspect public="1" set="null">
			<c path="awe.Aspect"/>
			<haxe_doc>The aspect to match entities against.</haxe_doc>
		</aspect>
		<entities public="1" set="null">
			<c path="Array"><x path="awe.Entity"/></c>
			<haxe_doc>The entities matching the `aspect`.</haxe_doc>
		</entities>
		<world public="1" set="null">
			<c path="awe.World"/>
			<haxe_doc>The world this subscription lies in.</haxe_doc>
		</world>
		<listeners set="null"><c path="Array"><c path="awe.SubscriptionListener"/></c></listeners>
		<addListener public="1" get="inline" set="null" line="40">
			<f a="listener">
				<c path="awe.SubscriptionListener"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Notify `listener` when entities are added / removed matching `aspect`.
        @param listener The listener to notify.</haxe_doc>
		</addListener>
		<removeListener public="1" get="inline" set="null" line="48">
			<f a="listener">
				<c path="awe.SubscriptionListener"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stop notifying `listener` when entities are added / removed matching
        `aspect`.
        @param listener The listener to notify.</haxe_doc>
		</removeListener>
		<initialize public="1" set="method" line="59">
			<f a="world">
				<c path="awe.World"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initialize this subscription in `world`.
        @param world The world to add this to.</haxe_doc>
		</initialize>
		<insertedSingle set="method" line="64">
			<f a="entity">
				<x path="awe.Entity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</insertedSingle>
		<removedSingle set="method" line="68">
			<f a="entity">
				<x path="awe.Entity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</removedSingle>
		<inserted set="method" line="72">
			<f a="entities">
				<c path="Array"><x path="awe.Entity"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</inserted>
		<removed set="method" line="76">
			<f a="entities">
				<c path="Array"><x path="awe.Entity"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</removed>
		<new set="method" line="52">
			<f a="aspect">
				<c path="awe.Aspect"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</new>
		<haxe_doc>Keeps a list of entities that meet the given `aspect`, and runs listeners
    when this list is added to / removed from.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="awe.PackedComponent" params="" file="src/awe/PackedComponent.hx">
		<a>
			<__offset><x path="Int"/></__offset>
			<__bytes><c path="haxe.io.Bytes"/></__bytes>
		</a>
		<haxe_doc>* Extra fields added to a packed component by the `Component.from` macro.</haxe_doc>
	</typedef>
	<class path="awe.System" params="" file="src/awe/System.hx">
		<world public="1" set="null">
			<c path="awe.World"/>
			<haxe_doc>The world containing this system.</haxe_doc>
		</world>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>If this system is enabled or not.</haxe_doc>
		</enabled>
		<checkProcessing public="1" get="inline" set="null" line="37">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Check if this system should be processed.
		@return If this should be processed or not.</haxe_doc>
		</checkProcessing>
		<initialize public="1" set="method" line="44">
			<f a="world">
				<c path="awe.World"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes this system in the `World`.
	@param world The `World` to initialize this in.</haxe_doc>
		</initialize>
		<process public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<meta><m n=":final"/></meta>
			<haxe_doc>Process this system by running `begin`, `processSystem`, then `end`.</haxe_doc>
		</process>
		<processSystem public="1" set="method" line="60">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called as the middle step of processing.</haxe_doc>
		</processSystem>
		<begin public="1" set="method" line="65">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called before processing starts.</haxe_doc>
		</begin>
		<end public="1" set="method" line="69">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called after processing has finished.</haxe_doc>
		</end>
		<dispose public="1" set="method" line="73">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Free resources used by this system, and prepare for deletion.</haxe_doc>
		</dispose>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create an enabled system with no world.</haxe_doc>
		</new>
		<haxe_doc>Performs operations related to entites.</haxe_doc>
	</class>
	<class path="awe.EntitySystem" params="" file="src/awe/System.hx" module="awe.System">
		<extends path="awe.System"/>
		<implements path="awe.SubscriptionListener"/>
		<aspect public="1" set="null">
			<c path="awe.Aspect"/>
			<haxe_doc>The aspect an entity must match to be considered by the system.</haxe_doc>
		</aspect>
		<subscription public="1" set="null">
			<c path="awe.EntitySubscription"/>
			<haxe_doc>The entity subscription, used to keep track of entities matching the
	    `aspect`.</haxe_doc>
		</subscription>
		<initialize public="1" set="method" line="108" override="1">
			<f a="world">
				<c path="awe.World"/>
				<x path="Void"/>
			</f>
			<haxe_doc>*	Initializes this system, as well as the subscription, in the `World`.
	 *	@param world The `World` to initialize this in.</haxe_doc>
		</initialize>
		<processEntity public="1" set="method" line="116">
			<f a="entity">
				<x path="awe.Entity"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called every time `process` is ran for each entity matching `Aspect`
	    @param entity The `Entity` to be processed.</haxe_doc>
		</processEntity>
		<processSystem public="1" set="method" line="117" override="1"><f a=""><x path="Void"/></f></processSystem>
		<inserted public="1" set="method" line="120"><f a="entities">
	<c path="Array"><x path="awe.Entity"/></c>
	<x path="Void"/>
</f></inserted>
		<removed public="1" set="method" line="121"><f a="entities">
	<c path="Array"><x path="awe.Entity"/></c>
	<x path="Void"/>
</f></removed>
		<new public="1" set="method" line="99">
			<f a="aspect">
				<c path="awe.Aspect"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Make a new EntitySystem that tracks entities matching an aspect.
	    @param aspect The aspect tracked entities must match.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Performs operations on entities matching a given `Archetype`.
    
    Extending this lets you use the '@auto' metadata in front of fields
    that are a `IComponentList<...>` or a `System` to automatically
    fetch this component list or system from the world in the `initialize`
    method.]]></haxe_doc>
		<meta><m n=":autoBuild"><e>awe.EntitySystem.build()</e></m></meta>
	</class>
	<class path="awe.World" params="" file="src/awe/World.hx">
		<components set="null">
			<x path="Map">
				<x path="awe.ComponentType"/>
				<c path="awe.IComponentList"><d/></c>
			</x>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</components>
		<systems set="null">
			<x path="haxe.ds.Vector"><c path="awe.System"/></x>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</systems>
		<entities public="1" set="null">
			<c path="de.polygonal.ds.ArrayList"><x path="awe.Entity"/></c>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</entities>
		<compositions set="null">
			<x path="Map">
				<x path="awe.Entity"/>
				<c path="de.polygonal.ds.BitVector"/>
			</x>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</compositions>
		<subscriptions set="null">
			<c path="de.polygonal.ds.ArrayList"><c path="awe.EntitySubscription"/></c>
			<meta><m n=":allow"><e>awe</e></m></meta>
		</subscriptions>
		<entityCount set="null">
			<x path="Int"/>
			<meta><m n=":allow"><e>awe</e></m></meta>
			<haxe_doc>How many entities have been created so far.</haxe_doc>
		</entityCount>
		<delta public="1">
			<x path="Float"/>
			<haxe_doc>The number of seconds since the last time `process` was called.
	    
	    This must be set manually so it can integrate with custom game loops.</haxe_doc>
		</delta>
		<getComponentList public="1" params="T" set="method" line="72">
			<f a="cl">
				<x path="Class"><c path="getComponentList.T"/></x>
				<t path="Null"><c path="awe.IComponentList"><c path="getComponentList.T"/></c></t>
			</f>
			<haxe_doc>Get the component list corresponding to the component `cl`.
	    @param cl The component class to retrieve the component list for.
	    @return The component list.</haxe_doc>
		</getComponentList>
		<getSystem public="1" params="T" set="method" line="80">
			<f a="cl">
				<x path="Class"><c path="getSystem.T"/></x>
				<t path="Null"><c path="getSystem.T"/></t>
			</f>
			<haxe_doc>Get the system that is an instance of `cl`.
	    @param cl The system class to retrieve the instance of.
	    @return The system.</haxe_doc>
		</getSystem>
		<process public="1" get="inline" set="null" line="131">
			<f a=""><x path="Void"/></f>
			<haxe_doc>*	Process all active systems.</haxe_doc>
		</process>
		<delayLoop public="1" set="method" line="140">
			<f a="interval">
				<x path="Float"/>
				<c path="awe.util.Timer"/>
			</f>
			<haxe_doc>*	Automatically run `process` at a set interval.
	 *	@param interval The interval to run the systems at (in seconds).
	 *	@return  The timer that has been created to run this.</haxe_doc>
		</delayLoop>
		<loop public="1" set="method" line="146"><f a=""><x path="Void"/></f></loop>
		<dispose public="1" set="method" line="159">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Free resources used by this world.</haxe_doc>
		</dispose>
		<new public="1" set="method" line="54">
			<f a="components:systems">
				<x path="Map">
					<x path="awe.ComponentType"/>
					<c path="awe.IComponentList"><d/></c>
				</x>
				<x path="haxe.ds.Vector"><c path="awe.System"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>*	Construct a new world.
	 *
	 *	Note: The `World.create` macro should be preferred.
	 *	@param components The component lists for every kind of component.
	 *	@param systems The systems that are processed.</haxe_doc>
		</new>
		<haxe_doc>The central object on which components, systems, etc. are added.
    
    Worlds should be constructed using the `World.build` macro.</haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="awe.WorldConfiguration" params="" file="src/awe/World.hx" module="awe.World"><a>
	<systems>
		<t path="Null"><c path="Array"><c path="awe.System"/></c></t>
		<meta><m n=":optional"/></meta>
	</systems>
	<expectedEntityCount>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</expectedEntityCount>
	<components>
		<t path="Null"><c path="Array"><x path="Class"><c path="awe.Component"/></x></c></t>
		<meta><m n=":optional"/></meta>
	</components>
</a></typedef>
	<class path="awe.managers.GroupManager" params="" file="src/awe/managers/GroupManager.hx">
		<extends path="awe.System"/>
		<groups><x path="Map">
	<c path="String"/>
	<c path="de.polygonal.ds.ArrayList"><x path="awe.Entity"/></c>
</x></groups>
		<add public="1" set="method" line="22">
			<f a="entity:group">
				<x path="awe.Entity"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the group of the entity.
	    @param entity The entity whose group is being set.
	    @param group The group to set the entity to.</haxe_doc>
		</add>
		<getEntities public="1" get="inline" set="null" line="32">
			<f a="group">
				<c path="String"/>
				<c path="de.polygonal.ds.ArrayList"><x path="awe.Entity"/></c>
			</f>
			<haxe_doc>Get the entities contained in a given group.
	    @param group The group to check.
	    @return The entities.</haxe_doc>
		</getEntities>
		<getGroups public="1" set="method" line="40">
			<f a="entity">
				<x path="awe.Entity"/>
				<c path="de.polygonal.ds.ArrayList"><c path="String"/></c>
			</f>
			<haxe_doc>Get all groups the entity belongs to..
	    @param entity The entity to get the groups of.
	    @return The groups it belongs to.</haxe_doc>
		</getGroups>
		<isInGroup public="1" get="inline" set="null" line="54">
			<f a="entity:group">
				<x path="awe.Entity"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if the entity is in the group.
		@param entity The entity to check.
		@param group The group to check the ntity is contained in.
		@return If the entity is in the group.</haxe_doc>
		</isInGroup>
		<remove public="1" get="inline" set="null" line="62">
			<f a="entity:group">
				<x path="awe.Entity"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the entity from the specified group.
		@param entity The entity to remove from the group.
		@param group The group to remove the entity from.</haxe_doc>
		</remove>
		<removeGroup public="1" get="inline" set="null" line="69">
			<f a="group">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Completely remove the group.
		@param group The group to remove.</haxe_doc>
		</removeGroup>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Handles entity grouping.</haxe_doc>
	</class>
	<class path="awe.util.BitVectorTools" params="" file="src/awe/util/BitVectorTools.hx">
		<contains public="1" set="method" line="5" static="1"><f a="set:subset">
	<c path="de.polygonal.ds.BitVector"/>
	<c path="de.polygonal.ds.BitVector"/>
	<x path="Bool"/>
</f></contains>
		<intersects public="1" set="method" line="12" static="1"><f a="set:subset">
	<c path="de.polygonal.ds.BitVector"/>
	<c path="de.polygonal.ds.BitVector"/>
	<x path="Bool"/>
</f></intersects>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.util.MacroTools" params="" file="src/awe/util/MacroTools.hx"><haxe_doc>Some handy macro tools.</haxe_doc></class>
	<class path="awe.util.MoreStringTools" params="" file="src/awe/util/MoreStringTools.hx">
		<isVowel public="1" set="method" line="7" static="1">
			<f a="char">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if this char is a vowel.</haxe_doc>
		</isVowel>
		<pluralize public="1" set="method" line="14" static="1">
			<f a="word">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Transform `word` into a plural.</haxe_doc>
		</pluralize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="awe.util.SignalListener" params="T" file="src/awe/util/Signal.hx" module="awe.util.Signal"><f a="">
	<c path="awe.util.SignalListener.T"/>
	<x path="Void"/>
</f></typedef>
	<abstract path="awe.util.Signal" params="T" file="src/awe/util/Signal.hx">
		<this><c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c></this>
		<to><icast field="getListeners"><c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c></icast></to>
		<haxe_doc>Dispatches events to listeners.</haxe_doc>
		<impl><class path="awe.util._Signal.Signal_Impl_" params="" file="src/awe/util/Signal.hx" private="1" module="awe.util.Signal">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="?capacity">
			<x path="Int"/>
			<x path="awe.util.Signal"><c path="awe.util.Signal.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Create a new signal.</haxe_doc>
	</_new>
	<dispatch public="1" get="inline" set="null" line="18" static="1">
		<f a="this:event">
			<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
			<c path="awe.util.Signal.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Dispatch `event`, notifying all listeners of the event.
		@param event The event to dispatch to all listeners.</haxe_doc>
	</dispatch>
	<add public="1" get="inline" set="null" line="26" static="1">
		<f a="this:dispatch">
			<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
			<t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a new dispatcher.
		@param dispatch The dispatcher to add.</haxe_doc>
	</add>
	<remove public="1" get="inline" set="null" line="33" static="1">
		<f a="this:dispatch">
			<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
			<t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a new dispatcher.
		@param dispatch The dispatcher to remove.</haxe_doc>
	</remove>
	<clear public="1" get="inline" set="null" line="37" static="1">
		<f a="this">
			<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Remove all the listeners.</haxe_doc>
	</clear>
	<getListeners public="1" get="inline" set="null" line="44" static="1">
		<f a="this">
			<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
			<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Get all the listeners binded to this.
		@return The listeners.</haxe_doc>
	</getListeners>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="awe.util._Signal.Signal_Impl_" params="" file="src/awe/util/Signal.hx" private="1" module="awe.util.Signal">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="?capacity">
				<x path="Int"/>
				<x path="awe.util.Signal"><c path="awe.util.Signal.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Create a new signal.</haxe_doc>
		</_new>
		<dispatch public="1" get="inline" set="null" line="18" static="1">
			<f a="this:event">
				<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
				<c path="awe.util.Signal.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Dispatch `event`, notifying all listeners of the event.
		@param event The event to dispatch to all listeners.</haxe_doc>
		</dispatch>
		<add public="1" get="inline" set="null" line="26" static="1">
			<f a="this:dispatch">
				<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
				<t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a new dispatcher.
		@param dispatch The dispatcher to add.</haxe_doc>
		</add>
		<remove public="1" get="inline" set="null" line="33" static="1">
			<f a="this:dispatch">
				<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
				<t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a new dispatcher.
		@param dispatch The dispatcher to remove.</haxe_doc>
		</remove>
		<clear public="1" get="inline" set="null" line="37" static="1">
			<f a="this">
				<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Remove all the listeners.</haxe_doc>
		</clear>
		<getListeners public="1" get="inline" set="null" line="44" static="1">
			<f a="this">
				<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
				<c path="de.polygonal.ds.ArrayList"><t path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></t></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Get all the listeners binded to this.
		@return The listeners.</haxe_doc>
		</getListeners>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="awe.util.Thread" params="" file="src/awe/util/Thread.hx"><c path="neko.vm.Thread"/></typedef>
	<class path="awe.util.Timer" params="" file="src/awe/util/Timer.hx">
		<stamp public="1" get="inline" set="null" line="22" static="1"><f a=""><x path="Float"/></f></stamp>
		<me><c path="neko.vm.Thread"/></me>
		<run public="1" set="dynamic" line="19"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method" line="10"><f a="time_ms">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="de.polygonal.Printf" params="" file="/home/tom/.haxe_lib/polygonal-printf/1,0,2-beta/de/polygonal/Printf.hx">
		<dataTypeMap static="1"><c path="haxe.ds.IntMap"><e path="de.polygonal._Printf.FormatDataType"/></c></dataTypeMap>
		<formatIntFuncHash static="1"><c path="haxe.ds.IntMap"><f a=":">
	<x path="Int"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></c></formatIntFuncHash>
		<formatFloatFuncHash static="1"><c path="haxe.ds.IntMap"><f a=":">
	<x path="Float"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></c></formatFloatFuncHash>
		<formatStringFuncHash static="1"><c path="haxe.ds.IntMap"><f a=":">
	<c path="String"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></c></formatStringFuncHash>
		<_initialized line="59" static="1"><x path="Bool"/></_initialized>
		<init set="method" line="61" static="1"><f a=""><x path="Void"/></f></init>
		<makeDataTypeMap set="method" line="107" static="1"><f a=""><c path="haxe.ds.IntMap"><e path="de.polygonal._Printf.FormatDataType"/></c></f></makeDataTypeMap>
		<format public="1" set="method" line="548" static="1">
			<f a="fmt:args">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>* Writes formatted data to a string.
	 * Runtime, essential features.</haxe_doc>
		</format>
		<tokenize set="method" line="609" static="1"><f a="fmt">
	<c path="String"/>
	<c path="Array"><e path="de.polygonal._Printf.FormatToken"/></c>
</f></tokenize>
		<formatBinary set="method" line="799" static="1"><f a="value:args">
	<x path="Int"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatBinary>
		<formatOctal set="method" line="838" static="1"><f a="value:args">
	<x path="Int"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatOctal>
		<formatHexadecimal set="method" line="866" static="1"><f a="value:args">
	<x path="Int"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatHexadecimal>
		<formatUnsignedDecimal set="method" line="898" static="1"><f a="value:args">
	<x path="Int"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatUnsignedDecimal>
		<formatNaturalFloat set="method" line="917" static="1"><f a="value:args">
	<x path="Float"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatNaturalFloat>
		<formatScientific set="method" line="938" static="1"><f a="value:args">
	<x path="Float"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatScientific>
		<formatSignedDecimal set="method" line="985" static="1"><f a="value:args">
	<x path="Int"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatSignedDecimal>
		<formatString set="method" line="1028" static="1"><f a="x:args">
	<c path="String"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatString>
		<formatNormalFloat set="method" line="1049" static="1"><f a="value:args">
	<x path="Float"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatNormalFloat>
		<formatCharacter set="method" line="1110" static="1"><f a="x:args">
	<x path="Int"/>
	<t path="de.polygonal._Printf.FormatArgs"/>
	<c path="String"/>
</f></formatCharacter>
		<padNumber set="method" line="1125" static="1"><f a="x:n:flags:width">
	<c path="String"/>
	<x path="Float"/>
	<x path="haxe.EnumFlags"><e path="de.polygonal._Printf.FormatFlags"/></x>
	<x path="Int"/>
	<c path="String"/>
</f></padNumber>
		<lpad set="method" line="1153" static="1"><f a="s:c:l">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></lpad>
		<rpad set="method" line="1160" static="1"><f a="s:c:l">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></rpad>
		<toHex get="inline" set="null" line="1167" static="1"><f a="x">
	<x path="Int"/>
	<c path="String"/>
</f></toHex>
		<toOct set="method" line="1186" static="1"><f a="x">
	<x path="Int"/>
	<c path="String"/>
</f></toOct>
		<iabs set="method" line="1199" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></iabs>
		<str params="T" set="method" line="1201" static="1"><f a="x">
	<c path="str.T"/>
	<c path="String"/>
</f></str>
		<codeAt get="inline" set="null" line="1203" static="1"><f a="x:i">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></codeAt>
		<isDigit get="inline" set="null" line="1205" static="1"><f a="x">
	<x path="Int"/>
	<x path="Bool"/>
</f></isDigit>
		<roundTo get="inline" set="null" line="1207" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></roundTo>
		<haxe_doc><![CDATA[* <p>C printf implementation.</p>
 * <p>See <a href="https://github.com/polygonal/printf" target="_blank">https://github.com/polygonal/printf</a>.</p>]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="de.polygonal._Printf.FormatArgs" params="" file="/home/tom/.haxe_lib/polygonal-printf/1,0,2-beta/de/polygonal/Printf.hx" private="1" module="de.polygonal.Printf"><a>
	<width><t path="Null"><x path="Int"/></t></width>
	<precision><t path="Null"><x path="Int"/></t></precision>
	<pos><x path="Int"/></pos>
	<flags><x path="haxe.EnumFlags"><e path="de.polygonal._Printf.FormatFlags"/></x></flags>
</a></typedef>
	<enum path="de.polygonal._Printf.FormatFlags" params="" file="/home/tom/.haxe_lib/polygonal-printf/1,0,2-beta/de/polygonal/Printf.hx" private="1" module="de.polygonal.Printf">
		<Minus/>
		<Plus/>
		<Space/>
		<Sharp/>
		<Zero/>
		<LengthH/>
		<LengthL/>
		<Lengthl/>
		<UpperCase/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="de.polygonal._Printf.FormatToken" params="" file="/home/tom/.haxe_lib/polygonal-printf/1,0,2-beta/de/polygonal/Printf.hx" private="1" module="de.polygonal.Printf">
		<BareString a="str"><c path="String"/></BareString>
		<Tag a="type:args">
			<e path="de.polygonal._Printf.FormatDataType"/>
			<t path="de.polygonal._Printf.FormatArgs"/>
		</Tag>
		<Property a="name"><c path="String"/></Property>
		<Unknown a="str:pos">
			<c path="String"/>
			<x path="Int"/>
		</Unknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="de.polygonal._Printf.FormatDataType" params="" file="/home/tom/.haxe_lib/polygonal-printf/1,0,2-beta/de/polygonal/Printf.hx" private="1" module="de.polygonal.Printf">
		<FmtInteger a="integerType"><e path="de.polygonal._Printf.IntegerType"/></FmtInteger>
		<FmtFloat a="floatType"><e path="de.polygonal._Printf.FloatType"/></FmtFloat>
		<FmtString/>
		<FmtPointer/>
		<FmtNothing/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="de.polygonal._Printf.IntegerType" params="" file="/home/tom/.haxe_lib/polygonal-printf/1,0,2-beta/de/polygonal/Printf.hx" private="1" module="de.polygonal.Printf">
		<ICharacter/>
		<ISignedDecimal/>
		<IUnsignedDecimal/>
		<IOctal/>
		<IHex/>
		<IBin/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="de.polygonal._Printf.FloatType" params="" file="/home/tom/.haxe_lib/polygonal-printf/1,0,2-beta/de/polygonal/Printf.hx" private="1" module="de.polygonal.Printf">
		<FNormal/>
		<FScientific/>
		<FNatural/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="de.polygonal.ds.Hashable" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/Hashable.hx" interface="1">
		<key public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A unique, unsigned 32-bit integer key.
		
		A hash table transforms this key into an index of an array element by using a hash function.</haxe_doc>
		</key>
		<haxe_doc>An object that can be identified by an unique integer key</haxe_doc>
	</class>
	<class path="de.polygonal.ds.Collection" params="T" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/Collection.hx" interface="1">
		<extends path="de.polygonal.ds.Hashable"/>
		<get_size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_size>
		<size public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The total number of elements in this collection.</haxe_doc>
		</size>
		<free public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disposes this collection by explicitly nullifying all internal references for GC'ing used resources.
		
		Improves GC efficiency/performance (optional).</haxe_doc>
		</free>
		<contains public="1" set="method">
			<f a="val">
				<c path="de.polygonal.ds.Collection.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if this collection contains `val`.</haxe_doc>
		</contains>
		<remove public="1" set="method">
			<f a="val">
				<c path="de.polygonal.ds.Collection.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes all occurrences of `val`.
		@return true if at least one occurrence of `val` was removed.</haxe_doc>
		</remove>
		<clear public="1" set="method">
			<f a="?gc">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes all elements from this collection.
		
		For performance reasons, elements are not nullified upon removal.
		
		This means that elements won't be available for the garbage collector immediately unless `gc` is true.
		@param gc if true, elements are nullifies upon removal (slower).</haxe_doc>
		</clear>
		<iterator public="1" set="method">
			<f a=""><c path="de.polygonal.ds.Itr"><c path="de.polygonal.ds.Collection.T"/></c></f>
			<haxe_doc><![CDATA[Iterates over all elements in this collection.
		
		Example:
			var c = new ArrayList<String>();
			for (element in c) trace(element);
			
			//or
			var c = new ArrayList<String>();
			var itr = c.iterator();
			while (itr.hasNext()) trace(itr.next());
			
			//inline hasNext() and next()
			var c = new ArrayList<String>();
			var itr:ArrayListIterator<String> = cast c.iterator();
			while (itr.hasNext()) trace(itr.next());
		
		@see http://haxe.org/ref/iterators]]></haxe_doc>
		</iterator>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if this collection is empty.</haxe_doc>
		</isEmpty>
		<toArray public="1" set="method">
			<f a=""><c path="Array"><c path="de.polygonal.ds.Collection.T"/></c></f>
			<haxe_doc>Returns an array storing all elements in this collection.</haxe_doc>
		</toArray>
		<clone public="1" set="method">
			<f a="?byRef:?copier">
				<x path="Bool"/>
				<f a="">
					<c path="de.polygonal.ds.Collection.T"/>
					<c path="de.polygonal.ds.Collection.T"/>
				</f>
				<c path="de.polygonal.ds.Collection"><c path="de.polygonal.ds.Collection.T"/></c>
			</f>
			<haxe_doc><![CDATA[Duplicates this collection.
		
		Supports shallow (structure only) and deep copies (structure & elements).
		
		Example:
			class Element implements de.polygonal.ds.Cloneable<Element> {
			    public var val:Int;
			    public function new(val:Int) {
			        this.val = val;
			    }
			    public function clone():Element {
			        return new Element(val);
			    }
			}
			
			...
			
			var c:Collection<Element> = new Array2<Element>(...);
			
			//shallow copy
			var o = c.clone(true);
			
			//deep copy
			var o = c.clone(false);
			
			//deep copy using a custom function
			var o = c.clone(false, function(x) return new Element(x.val));
		
		If `byRef` is true, primitive elements are copied by value whereas objects are copied by reference.
		
		If `byRef` is false, the `copier` function is used for copying elements. If omitted, `clone()` is called on each element assuming all elements implement `Cloneable`.]]></haxe_doc>
		</clone>
		<haxe_doc>A collection is an object that stores other objects (its elements)</haxe_doc>
	</class>
	<class path="de.polygonal.ds.List" params="T" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/List.hx" interface="1">
		<extends path="de.polygonal.ds.Collection"><c path="de.polygonal.ds.List.T"/></extends>
		<get public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="de.polygonal.ds.List.T"/>
			</f>
			<haxe_doc>Returns the value at the given `index`.</haxe_doc>
		</get>
		<set public="1" set="method">
			<f a="index:val">
				<x path="Int"/>
				<c path="de.polygonal.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Overwrites the value at the given `index` with `val`.</haxe_doc>
		</set>
		<add public="1" set="method">
			<f a="val">
				<c path="de.polygonal.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds `val` to the end of the list.</haxe_doc>
		</add>
		<insert public="1" set="method">
			<f a="index:val">
				<x path="Int"/>
				<c path="de.polygonal.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts `val` at the specified index.
		
		Shifts the element currently at that position (if any) and any subsequent elements to the right (indices + 1).
		If `index` equals `Collection.size`, `val` gets appended to the end of the list.</haxe_doc>
		</insert>
		<removeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="de.polygonal.ds.List.T"/>
			</f>
			<haxe_doc>Removes the value at the given `index`.</haxe_doc>
		</removeAt>
		<indexOf public="1" set="method">
			<f a="val">
				<c path="de.polygonal.ds.List.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first occurrence of `val`, or -1 if this list does not contain `val`.</haxe_doc>
		</indexOf>
		<getRange public="1" set="method">
			<f a="fromIndex:toIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.List"><c path="de.polygonal.ds.List.T"/></c>
			</f>
			<haxe_doc>Returns a shallow copy of a range of elements in the interval [`fromIndex`, `toIndex`).
		If `toIndex` is negative, the value represents the number of elements.</haxe_doc>
		</getRange>
		<haxe_doc>An ordered list of elements</haxe_doc>
	</class>
	<class path="de.polygonal.ds.ArrayList" params="T" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/ArrayList.hx">
		<implements path="de.polygonal.ds.List"><c path="de.polygonal.ds.ArrayList.T"/></implements>
		<key public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A unique identifier for this object.
		
		A hash table transforms this key into an index of an array element by using a hash function.</haxe_doc>
		</key>
		<capacity public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The size of the allocated storage space for the elements.
		If more space is required to accommodate new elements, `capacity` grows according to `this.growthRate`.
		The capacity never falls below the initial size defined in the constructor and is usually a bit larger than `this.size` (_mild overallocation_).</haxe_doc>
		</capacity>
		<growthRate public="1">
			<x path="Int"/>
			<haxe_doc>The growth rate of the container.
		@see `GrowthRate`</haxe_doc>
		</growthRate>
		<reuseIterator public="1">
			<x path="Bool"/>
			<haxe_doc>If true, reuses the iterator object instead of allocating a new one when calling `this.iterator()`.
		
		The default is false.
		
		_If this value is true, nested iterations will fail as only one iteration is allowed at a time._</haxe_doc>
		</reuseIterator>
		<mData><t path="de.polygonal.ds.NativeArray"><c path="de.polygonal.ds.ArrayList.T"/></t></mData>
		<mInitialCapacity><x path="Int"/></mInitialCapacity>
		<mSize><x path="Int"/></mSize>
		<mIterator><c path="de.polygonal.ds.ArrayListIterator"><c path="de.polygonal.ds.ArrayList.T"/></c></mIterator>
		<get public="1" get="inline" set="null" line="111">
			<f a="i">
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList.T"/>
			</f>
			<haxe_doc>Returns the element stored at index `i`.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="121">
			<f a="i:val">
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the element at index `i` with `val`.</haxe_doc>
		</set>
		<add public="1" get="inline" set="null" line="131">
			<f a="val">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends `val`, same as `this.pushBack()`.</haxe_doc>
		</add>
		<pushBack public="1" get="inline" set="null" line="139">
			<f a="val">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds `val` to the end of this list and returns the new size.</haxe_doc>
		</pushBack>
		<addArray public="1" set="method" line="151">
			<f a="vals:?first:?count">
				<c path="Array"><c path="de.polygonal.ds.ArrayList.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Appends `count` elements stored in `vals` starting at index `first` to this list.
		@param from the index to start from. If omitted, `first` is set to `vals`[0].
		@param count the number of elements to append. If omitted, `count` is set to `vals`.length.</haxe_doc>
		</addArray>
		<unsafePushBack public="1" get="inline" set="null" line="186">
			<f a="val">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Faster than `this.pushBack()` by skipping boundary checking.
		
		The user is responsible for making sure that there is enough space available (e.g. by calling `this.reserve()`).</haxe_doc>
		</unsafePushBack>
		<popBack public="1" get="inline" set="null" line="197">
			<f a=""><c path="de.polygonal.ds.ArrayList.T"/></f>
			<haxe_doc>Removes the last element from this list and returns that element.</haxe_doc>
		</popBack>
		<popFront public="1" set="method" line="209">
			<f a=""><c path="de.polygonal.ds.ArrayList.T"/></f>
			<haxe_doc>Removes and returns the first element.
		
		To fill the gap, any subsequent elements are shifted to the left (indices - 1).</haxe_doc>
		</popFront>
		<pushFront public="1" set="method" line="230">
			<f a="val">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Prepends `val` to the first element and returns the new size.
		
		Shifts the first element (if any) and any subsequent elements to the right (indices + 1).</haxe_doc>
		</pushFront>
		<front public="1" get="inline" set="null" line="260">
			<f a=""><c path="de.polygonal.ds.ArrayList.T"/></f>
			<haxe_doc>Returns the first element.
		This is the element at index 0.</haxe_doc>
		</front>
		<back public="1" get="inline" set="null" line="271">
			<f a=""><c path="de.polygonal.ds.ArrayList.T"/></f>
			<haxe_doc>Returns the last element.
		This is the element at index `this.size` - 1.</haxe_doc>
		</back>
		<swap public="1" get="inline" set="null" line="281">
			<f a="i:j">
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Swaps the element stored at index `i` with the element stored at index `j`.</haxe_doc>
		</swap>
		<copy public="1" get="inline" set="null" line="297">
			<f a="src:dst">
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Replaces the element at index `dst` with the element stored at index `src`.</haxe_doc>
		</copy>
		<inRange public="1" get="inline" set="null" line="311">
			<f a="i">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the index `i` is valid for reading a value.</haxe_doc>
		</inRange>
		<insert public="1" set="method" line="322">
			<f a="index:val">
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts `val` at the specified `index`.
		
		Shifts the element currently at that position (if any) and any subsequent elements to the right (indices + 1).
		If `index` equals `this.size`, `val` gets appended to the end of the list.</haxe_doc>
		</insert>
		<removeAt public="1" set="method" line="346">
			<f a="i">
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList.T"/>
			</f>
			<haxe_doc>Removes the element at the specified index `i`.
		
		Shifts any subsequent elements to the left (indices - 1).</haxe_doc>
		</removeAt>
		<swapPop public="1" get="inline" set="null" line="367">
			<f a="i">
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList.T"/>
			</f>
			<haxe_doc>Fast removal of the element at index `i` if the order of the elements doesn't matter.
		
		@return the element at index `i` prior removal.</haxe_doc>
		</swapPop>
		<forEach public="1" get="inline" set="null" line="386">
			<f a="f">
				<f a=":">
					<c path="de.polygonal.ds.ArrayList.T"/>
					<x path="Int"/>
					<c path="de.polygonal.ds.ArrayList.T"/>
				</f>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Calls `f` on all elements in order.
		
		The function signature is: `f(value, index):output`
		
		- value: current element
		- index: the index number of value
		- output: element to be stored at given index</haxe_doc>
		</forEach>
		<iter public="1" get="inline" set="null" line="398">
			<f a="f">
				<f a="">
					<c path="de.polygonal.ds.ArrayList.T"/>
					<x path="Void"/>
				</f>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Calls 'f` on all elements in order.</haxe_doc>
		</iter>
		<trim public="1" set="method" line="411">
			<f a="n">
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Cuts of `this.size` - `n` elements.
		
		This only modifies the value of `this.size` and does not perform reallocation.</haxe_doc>
		</trim>
		<join public="1" set="method" line="422">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts the data in this dense array to strings, inserts `sep` between the elements, concatenates them, and returns the resulting string.</haxe_doc>
		</join>
		<binarySearch public="1" set="method" line="453">
			<f a="val:from:?cmp">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Int"/>
				<f a=":">
					<c path="de.polygonal.ds.ArrayList.T"/>
					<c path="de.polygonal.ds.ArrayList.T"/>
					<x path="Int"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Finds the first occurrence of `val` by using the binary search algorithm assuming elements are sorted.
		@param from the index to start from. The default value is 0.
		@param cmp a comparison function for the binary search. If omitted, the method assumes that all elements implement `Comparable`.
		@return the index storing `val` or the bitwise complement (~) of the index where the `val` would be inserted (guaranteed to be a negative number).<br/>
		_The insertion point is only valid if `from` is 0._]]></haxe_doc>
		</binarySearch>
		<indexOf public="1" set="method" line="487">
			<f a="val">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":access"><e>de.polygonal.ds.ArrayList</e></m></meta>
			<haxe_doc>Finds the first occurrence of `val` (by incrementing indices - from left to right).
		@return the index storing `val` or -1 if `val` was not found.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="508">
			<f a="val:?from">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Finds the first occurrence of `val` (by decrementing indices - from right to left) and returns the index storing `val` or -1 if `val` was not found.
		@param from the index to start from.
		<br/>By default, the method starts from the last element in this dense array.]]></haxe_doc>
		</lastIndexOf>
		<concat public="1" set="method" line="535">
			<f a="val:?copy">
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
				<x path="Bool"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Concatenates this array with `val` by appending all elements of `val` to this array.
		@param copy if true, returns a new array instead of modifying this array.</haxe_doc>
		</concat>
		<reverse public="1" set="method" line="563">
			<f a="?first:?last">
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Reverses this list in place in the range [`first`, `last`] (the first element becomes the last and the last becomes the first).</haxe_doc>
		</reverse>
		<blit public="1" set="method" line="595">
			<f a="destination:source:n">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Copies `n` elements from the location pointed by the index `source` to the location pointed by `destination`.
		
		Copying takes place as if an intermediate buffer was used, allowing the destination and source to overlap.
		
		@see http://www.cplusplus.com/reference/clibrary/cstring/memmove/</haxe_doc>
		</blit>
		<sort public="1" set="method" line="617">
			<f a="?cmp:?useInsertionSort:?first:?count">
				<f a=":">
					<c path="de.polygonal.ds.ArrayList.T"/>
					<c path="de.polygonal.ds.ArrayList.T"/>
					<x path="Int"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc><![CDATA[Sorts the elements of this dense array using the quick sort algorithm.
		@param cmp a comparison function.
		<br/>If null, the elements are compared using `element.compare()`.
		<br/>_In this case all elements have to implement `Comparable`._
		@param useInsertionSort if true, the dense array is sorted using the insertion sort algorithm.
		<br/>This is faster for nearly sorted lists.
		@param first sort start index. The default value is 0.
		@param count the number of elements to sort (range: [`first`, `first` + `count`]).
		<br/>If omitted, `count` is set to the remaining elements (`this.size` - `first`).]]></haxe_doc>
		</sort>
		<insertionSort public="1" get="inline" set="null" line="645">
			<f a="cmp:first:count">
				<f a=":">
					<c path="de.polygonal.ds.ArrayList.T"/>
					<c path="de.polygonal.ds.ArrayList.T"/>
					<x path="Int"/>
				</f>
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Sorts the elements using the insertion sort algorithm. Fast for nearly sorted lists.
		@param cmp a comparison function.
		@param first sort start index.
		@param count the number of elements to sort (range: [`first`, `first` + `count`]).</haxe_doc>
		</insertionSort>
		<shuffle public="1" set="method" line="676">
			<f a="?rvals">
				<c path="Array"><x path="Float"/></c>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Shuffles the elements of this collection by using the Fisher-Yates algorithm.
		@param rvals a list of random double values in the interval [0, 1) defining the new positions of the elements.
		If omitted, random values are generated on-the-fly by calling `Shuffle.frand()`.</haxe_doc>
		</shuffle>
		<toString public="1" set="method" line="710">
			<f a=""><c path="String"/></f>
			<haxe_doc>Prints out all elements.</haxe_doc>
		</toString>
		<quickSort set="method" line="733"><f a="first:k:cmp">
	<x path="Int"/>
	<x path="Int"/>
	<f a=":">
		<c path="de.polygonal.ds.ArrayList.T"/>
		<c path="de.polygonal.ds.ArrayList.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></quickSort>
		<quickSortComparable set="method" line="784"><f a="first:k">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></quickSortComparable>
		<insertionSortComparable set="method" line="843"><f a="first:k">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></insertionSortComparable>
		<reserve public="1" set="method" line="882">
			<f a="n">
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Preallocates storage for `n` elements.
		
		May cause a reallocation, but has no effect on `this.size` and its elements.
		Useful before inserting a large number of elements as this reduces the amount of incremental reallocation.</haxe_doc>
		</reserve>
		<init public="1" set="method" line="897">
			<f a="n:val">
				<x path="Int"/>
				<c path="de.polygonal.ds.ArrayList.T"/>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Sets `n` elements to `val` (by reference).
		
		Automatically reserves storage for `n` elements so an additional call to `this.reserve()` is not required.</haxe_doc>
		</init>
		<pack public="1" set="method" line="912">
			<f a=""><c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c></f>
			<haxe_doc>Reduces the capacity of the internal container to the initial capacity.
		
		May cause a reallocation, but has no effect on `this.size` and its elements.
		An application can use this operation to free up memory by unlocking resources for the garbage collector.</haxe_doc>
		</pack>
		<getRange public="1" set="method" line="931">
			<f a="fromIndex:toIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.List"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Returns an `ArrayList` object storing elements in the range [`fromIndex`, `toIndex`).
		If `toIndex` is negative, the value represents the number of elements.</haxe_doc>
		</getRange>
		<of public="1" set="method" line="955">
			<f a="other">
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
				<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc>Make this an exact copy of `other`.</haxe_doc>
		</of>
		<getData public="1" get="inline" set="null" line="969">
			<f a=""><t path="de.polygonal.ds.NativeArray"><c path="de.polygonal.ds.ArrayList.T"/></t></f>
			<haxe_doc>Returns a reference to the internal container storing the elements of this collection.
		
		Useful for fast iteration or low-level operations.</haxe_doc>
		</getData>
		<grow set="method" line="974"><f a=""><x path="Void"/></f></grow>
		<resizeContainer set="method" line="980"><f a="newSize">
	<x path="Int"/>
	<x path="Void"/>
</f></resizeContainer>
		<size public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The total number of elements stored in this list.</haxe_doc>
		</size>
		<get_size get="inline" set="null" line="993"><f a=""><x path="Int"/></f></get_size>
		<free public="1" set="method" line="1003">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroys this object by explicitly nullifying all elements for GC'ing used resources.
		
		Improves GC efficiency/performance (optional).</haxe_doc>
		</free>
		<contains public="1" set="method" line="1017">
			<f a="val">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if this list contains `val`.</haxe_doc>
		</contains>
		<remove public="1" set="method" line="1034">
			<f a="val">
				<c path="de.polygonal.ds.ArrayList.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes all occurrences of `val`.
		
		Shifts any subsequent elements to the left (indices - 1).
		@return true if at least one occurrence of `val` was removed.</haxe_doc>
		</remove>
		<clear public="1" set="method" line="1082">
			<f a="?gc">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Clears this list by nullifying all elements so the garbage collector can reclaim used memory.</haxe_doc>
		</clear>
		<iterator public="1" set="method" line="1095">
			<f a=""><c path="de.polygonal.ds.Itr"><c path="de.polygonal.ds.ArrayList.T"/></c></f>
			<haxe_doc>Returns a new *ArrayListIterator* object to iterate over all elements contained in this list.
		
		Order: Row-major order (row-by-row).
		
		@see http://haxe.org/ref/iterators</haxe_doc>
		</iterator>
		<isEmpty public="1" set="method" line="1112">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true only if `this.size` is 0.</haxe_doc>
		</isEmpty>
		<toArray public="1" set="method" line="1122">
			<f a=""><c path="Array"><c path="de.polygonal.ds.ArrayList.T"/></c></f>
			<haxe_doc>Returns an array containing all elements in this list.
		
		Preserves the natural order of this array.</haxe_doc>
		</toArray>
		<clone public="1" set="method" line="1134">
			<f a="?byRef:?copier">
				<x path="Bool"/>
				<f a="">
					<c path="de.polygonal.ds.ArrayList.T"/>
					<c path="de.polygonal.ds.ArrayList.T"/>
				</f>
				<c path="de.polygonal.ds.Collection"><c path="de.polygonal.ds.ArrayList.T"/></c>
			</f>
			<haxe_doc><![CDATA[Creates and returns a shallow copy (structure only - default) or deep copy (structure & elements) of this list.
		
		If `byRef` is true, primitive elements are copied by value whereas objects are copied by reference.
		
		If `byRef` is false, the `copier` function is used for copying elements. If omitted, `clone()` is called on each element assuming all elements implement `Cloneable`.]]></haxe_doc>
		</clone>
		<new public="1" set="method" line="89">
			<f a="?initalCapacity:?source:?fixed">
				<x path="Int"/>
				<c path="Array"><c path="de.polygonal.ds.ArrayList.T"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@param initialCapacity the initial physical space for storing values.
		Useful before inserting a large number of elements as this reduces the amount of incremental reallocation.
		@param source copies all values from `source` in the range [0, `source.length` - 1] to this collection.
		@param fixed if true, growthRate is set to FIXED</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A growable, dense array.
	
	Example:
		var o = new de.polygonal.ds.ArrayList<Int>();
		for (i in 0...4) o.pushBack(i);
		trace(o); //outputs:
		
		[ ArrayList size=4 capacity=4
		  0 -> 0
		  1 -> 1
		  2 -> 2
		  3 -> 3
		]]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="de.polygonal.ds.Itr" params="T" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/Itr.hx" interface="1">
		<hasNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if this iteration has more elements.
		
		@see http://haxe.org/api/iterator</haxe_doc>
		</hasNext>
		<next public="1" set="method">
			<f a=""><c path="de.polygonal.ds.Itr.T"/></f>
			<haxe_doc>Returns the next element in this iteration.
		
		@see http://haxe.org/api/iterator</haxe_doc>
		</next>
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Removes the last element returned by the iterator from the collection.
		
		Example:
			var c:Collection<String> = new Array2<String>(...);
			var itr = c.iterator();
			while (itr.hasNext()) {
			    var val = itr.next();
			    itr.remove(); //removes val
			}
			trace(c.isEmpty()); //true]]></haxe_doc>
		</remove>
		<reset public="1" set="method">
			<f a=""><c path="de.polygonal.ds.Itr"><c path="de.polygonal.ds.Itr.T"/></c></f>
			<haxe_doc><![CDATA[Resets this iteration so the iterator points to the first element in the collection.
		
		Improves performance if an iterator is frequently used.
		
		Example:
			var c:Collection<String> = new Array2<String>(...);
			var itr = c.iterator();
			for (i in 0...100) {
			    itr.reset();
			    for (element in itr) {
			        trace(element);
			    }
			}]]></haxe_doc>
		</reset>
		<haxe_doc><![CDATA[An iterator over a collection
	
	Same as typedef Iterator<T> but with an extra `this.reset()` and `this.remove()` method.]]></haxe_doc>
	</class>
	<class path="de.polygonal.ds.ArrayListIterator" params="T" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/ArrayList.hx" module="de.polygonal.ds.ArrayList">
		<implements path="de.polygonal.ds.Itr"><c path="de.polygonal.ds.ArrayListIterator.T"/></implements>
		<mObject><c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayListIterator.T"/></c></mObject>
		<mData><t path="de.polygonal.ds.NativeArray"><c path="de.polygonal.ds.ArrayListIterator.T"/></t></mData>
		<mI><x path="Int"/></mI>
		<mS><x path="Int"/></mS>
		<free public="1" set="method" line="1179"><f a=""><x path="Void"/></f></free>
		<reset public="1" get="inline" set="null" line="1185"><f a=""><c path="de.polygonal.ds.Itr"><c path="de.polygonal.ds.ArrayListIterator.T"/></c></f></reset>
		<hasNext public="1" get="inline" set="null" line="1193"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="1198"><f a=""><c path="de.polygonal.ds.ArrayListIterator.T"/></f></next>
		<remove public="1" set="method" line="1203"><f a=""><x path="Void"/></f></remove>
		<new public="1" set="method" line="1173"><f a="x">
	<c path="de.polygonal.ds.ArrayList"><c path="de.polygonal.ds.ArrayListIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>de.polygonal.ds.ArrayList</e></m>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="de.polygonal.ds.BitVector" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/BitVector.hx">
		<implements path="de.polygonal.ds.Hashable"/>
		<key public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A unique identifier for this object.
		
		A hash table transforms this key into an index of an array element by using a hash function.</haxe_doc>
		</key>
		<numBits public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The total number of bits that the bit-vector can store.</haxe_doc>
		</numBits>
		<arrSize public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The total number of 32-bit integers allocated for storing the bits.</haxe_doc>
		</arrSize>
		<mData><t path="de.polygonal.ds.NativeArray"><x path="Int"/></t></mData>
		<free public="1" set="method" line="80">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroys this object by explicitly nullifying the array storing the bits.</haxe_doc>
		</free>
		<ones public="1" set="method" line="88">
			<f a=""><x path="Int"/></f>
			<haxe_doc>The total number of bits set to one.</haxe_doc>
		</ones>
		<has public="1" get="inline" set="null" line="98">
			<f a="i">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the bit at index `i` is 1.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="108">
			<f a="i">
				<x path="Int"/>
				<c path="de.polygonal.ds.BitVector"/>
			</f>
			<haxe_doc>Sets the bit at index `i` to one.</haxe_doc>
		</set>
		<clear public="1" get="inline" set="null" line="120">
			<f a="i">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the bit at index `i` to zero.</haxe_doc>
		</clear>
		<clearAll public="1" get="inline" set="null" line="131">
			<f a=""><c path="de.polygonal.ds.BitVector"/></f>
			<haxe_doc>Sets all bits in the bit-vector to zero.</haxe_doc>
		</clearAll>
		<setAll public="1" get="inline" set="null" line="145">
			<f a=""><c path="de.polygonal.ds.BitVector"/></f>
			<haxe_doc>Sets all bits in the bit-vector to one.</haxe_doc>
		</setAll>
		<clearRange public="1" set="method" line="157">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.BitVector"/>
			</f>
			<haxe_doc>Clears all bits in the range [`min`, `max`).
		
		This is faster than clearing individual bits by using `this.clear()`.</haxe_doc>
		</clearRange>
		<setRange public="1" set="method" line="179">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<c path="de.polygonal.ds.BitVector"/>
			</f>
			<haxe_doc>Sets all bits in the range [`min`, `max`).
		
		This is faster than setting individual bits by using `this.set()`.</haxe_doc>
		</setRange>
		<ofBool public="1" get="inline" set="null" line="199">
			<f a="i:cond">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="de.polygonal.ds.BitVector"/>
			</f>
			<haxe_doc>Sets the bit at index `i` to one if `cond` is true or clears the bit at index `i` if `cond` is false.</haxe_doc>
		</ofBool>
		<getBucketAt public="1" get="inline" set="null" line="210">
			<f a="i">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the bucket at index `i`.
		
		A bucket is a 32-bit integer for storing bit flags.</haxe_doc>
		</getBucketAt>
		<getBuckets public="1" get="inline" set="null" line="223">
			<f a="out">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Writes all buckets to `out`.
		
		A bucket is a 32-bit integer for storing bit flags.
		@return the total number of buckets.</haxe_doc>
		</getBuckets>
		<resize public="1" set="method" line="235">
			<f a="numBits">
				<x path="Int"/>
				<c path="de.polygonal.ds.BitVector"/>
			</f>
			<haxe_doc><![CDATA[Resizes the bit-vector to `numBits` bits.
		
		Preserves existing values if new size > old size.]]></haxe_doc>
		</resize>
		<toBytes public="1" set="method" line="270">
			<f a="?bigEndian">
				<x path="Bool"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<haxe_doc>Writes the data in this bit-vector to a byte array.
		
		The number of bytes equals `this.bucketSize()` × 4 and the number of bits equals `numBits`.
		@param bigEndian the byte order (default is little endian)</haxe_doc>
		</toBytes>
		<ofBytes public="1" set="method" line="293">
			<f a="bytes:?bigEndian">
				<t path="haxe.io.BytesData"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the bits from `bytes` into this bit vector.
		
		The bit-vector is resized to the size of `bytes`.
		@param bigEndian the input byte order (default is little endian)</haxe_doc>
		</ofBytes>
		<toString public="1" set="method" line="346">
			<f a=""><c path="String"/></f>
			<haxe_doc>Prints out all elements.</haxe_doc>
		</toString>
		<clone public="1" set="method" line="372">
			<f a=""><c path="de.polygonal.ds.BitVector"/></f>
			<haxe_doc>Creates a copy of this bit vector.</haxe_doc>
		</clone>
		<new public="1" set="method" line="69">
			<f a="numBits">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a bit-vector capable of storing a total of `numBits` bits.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[An array data structure that compactly stores individual bits (boolean values)
	
	Example:
		var o = new de.polygonal.ds.BitVector(40);
		for (i in 0...40) {
		    if (i & 1 == 0) {
		        o.set(i);
		    }
		}
		trace(o); //outputs:
		
		[ BitVector numBits=40
		  0 -> 01010101010101010101010101010101
		  1 -> 00000000000000000000000001010101
		]]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="de.polygonal.ds.Cloneable" params="T" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/Cloneable.hx" interface="1">
		<clone public="1" set="method">
			<f a=""><c path="de.polygonal.ds.Cloneable.T"/></f>
			<haxe_doc>Returns a copy of this object.</haxe_doc>
		</clone>
		<haxe_doc><![CDATA[An object that can be cloned by calling `object.clone()`
	
	Example:
		class Foo implements de.polygonal.ds.Cloneable<Foo> {
			public function new() {}
			public function clone():Foo {
				return new Foo();
			}
		}]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="de.polygonal.ds.Comparable" params="T" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/Comparable.hx" interface="1">
		<compare public="1" set="method">
			<f a="other">
				<c path="de.polygonal.ds.Comparable.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares this object to `other`.
		
		The return value should be > 0 if this object is "bigger" than `other`, < 0 if this object is "smaller" than `other` and 0 if both are "equal".]]></haxe_doc>
		</compare>
		<haxe_doc><![CDATA[Specifies that the order of an element in a collection can be determined by calling `object.compare(otherObject)`
	
	Example:
		class Element implements de.polygonal.ds.Comparable<Element> {
		    public var val:Int;
		    public function new() {}
		    public function compare(other:Element):Int {
		        return val - other.val;
		    }
		}]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="de.polygonal.ds.HashKey" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/HashKey.hx">
		<_counter static="1"><t path="Null"><x path="Int"/></t></_counter>
		<next public="1" set="method" line="38" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the next integer in a list of unique, unsigned integer keys.</haxe_doc>
		</next>
		<haxe_doc>Generates unique, unsigned integer keys</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="de.polygonal.ds.NativeArray" params="T" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/NativeArray.hx">
		<c path="neko.NativeArray"><c path="de.polygonal.ds.NativeArray.T"/></c>
		<haxe_doc>Fixed size "native" array that can be faster on some targets.</haxe_doc>
	</typedef>
	<class path="de.polygonal.ds.tools.ArrayTools" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/tools/ArrayTools.hx">
		<alloc public="1" params="T" get="inline" set="null" line="35" static="1">
			<f a="len">
				<x path="Int"/>
				<c path="Array"><c path="alloc.T"/></c>
			</f>
			<haxe_doc>Allocates an array with length `len`.</haxe_doc>
		</alloc>
		<trim public="1" params="T" get="inline" set="null" line="64" static="1">
			<f a="a:len">
				<c path="Array"><c path="trim.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="trim.T"/></c>
			</f>
			<haxe_doc>Shrinks `a` to length `len` and returns `a`.</haxe_doc>
		</trim>
		<swap public="1" params="T" get="inline" set="null" line="85" static="1">
			<f a="array:a:b">
				<c path="Array"><c path="swap.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Swaps the elements of `array` at indices `a` and `b`.</haxe_doc>
		</swap>
		<getFront public="1" params="T" get="inline" set="null" line="104" static="1">
			<f a="array:index">
				<c path="Array"><c path="getFront.T"/></c>
				<x path="Int"/>
				<c path="getFront.T"/>
			</f>
			<haxe_doc>Gets the element at index `index`, then exchanges it with element at the
		front of `array` (i.e. at index 0).  Used to facilitate fast lookups of
		array elements that are frequently used.</haxe_doc>
		</getFront>
		<init public="1" params="T" set="method" line="117" static="1">
			<f a="a:val:?first:?n">
				<c path="Array"><c path="init.T"/></c>
				<c path="init.T"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="init.T"/></c>
			</f>
			<haxe_doc>Sets `n` elements in `a` to `val` starting at index `first` and returns `a`.
		If `n` is zero, `n` is set to the length of `a`.</haxe_doc>
		</init>
		<blit public="1" params="T" set="method" line="134" static="1">
			<f a="src:srcPos:dst:dstPos:n">
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `n` elements from `src`, beginning at `srcPos` to `dst`, beginning at `dstPos`.
		
		Copying takes place as if an intermediate buffer was used, allowing the destination and source to overlap.</haxe_doc>
		</blit>
		<iter public="1" params="T" get="inline" set="null" line="200" static="1">
			<f a="src:f:?n">
				<c path="Array"><c path="iter.T"/></c>
				<f a="">
					<c path="iter.T"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls 'f` on all elements in the interval [0, `n`) in order.
		If `n` is omitted, `n` is set to `src`.length.</haxe_doc>
		</iter>
		<binarySearchCmp public="1" params="T" set="method" line="212" static="1">
			<f a="a:x:min:max:comparator">
				<c path="Array"><c path="binarySearchCmp.T"/></c>
				<c path="binarySearchCmp.T"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a=":">
					<c path="binarySearchCmp.T"/>
					<c path="binarySearchCmp.T"/>
					<x path="Int"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Searches the sorted array `src` for `val` in the range [`min`, `max`] using the binary search algorithm.
		
		@return the array index storing `val` or the bitwise complement (~) of the index where `val` would be inserted (guaranteed to be a negative number).
		<br/>The insertion point is only valid for `min` = 0 and `max` = `src.length` - 1.]]></haxe_doc>
		</binarySearchCmp>
		<binarySearchf public="1" set="method" line="241" static="1">
			<f a="a:x:min:max">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Searches the sorted array `src` for `val` in the range [`min`, `max`] using the binary search algorithm.
		
		@return the array index storing `val` or the bitwise complement (~) of the index where `val` would be inserted (guaranteed to be a negative number).
		<br/>The insertion point is only valid for `min` = 0 and `max` = `src.length` - 1.]]></haxe_doc>
		</binarySearchf>
		<binarySearchi public="1" set="method" line="269" static="1">
			<f a="a:x:min:max">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Searches the sorted array `src` for `val` in the range [`min`, `max`] using the binary search algorithm.
		
		@return the array index storing `val` or the bitwise complement (~) of the index where `val` would be inserted (guaranteed to be a negative number).
		<br/>The insertion point is only valid for `min` = 0 and `max` = `src.length` - 1.]]></haxe_doc>
		</binarySearchi>
		<shuffle public="1" params="T" set="method" line="296" static="1">
			<f a="a:?rvals">
				<c path="Array"><c path="shuffle.T"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Shuffles the elements of the array `a` by using the Fisher-Yates algorithm.
		@param rvals a list of random double values in the range between [0, 1) defining the new positions of the elements.
		If omitted, random values are generated on-the-fly by calling `Shuffle.frand()`.</haxe_doc>
		</shuffle>
		<sortRange public="1" set="method" line="334" static="1">
			<f a="a:cmp:useInsertionSort:first:n">
				<c path="Array"><x path="Float"/></c>
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sorts the elements of the array `a` by using the quick sort algorithm.
		@param cmp a comparison function.
		@param useInsertionSort if true, the array is sorted using the insertion sort algorithm. This is faster for nearly sorted lists.
		@param first sort start index. The default value is 0.
		@param n the number of elements to sort (range: [`first`, `first` + `n`]).
		If omitted, `n` is set to `a.length`.</haxe_doc>
		</sortRange>
		<quickPerm public="1" set="method" line="370" static="1">
			<f a="n">
				<x path="Int"/>
				<c path="Array"><c path="Array"><x path="Int"/></c></c>
			</f>
			<haxe_doc>A quick counting permutation algorithm, where `n` is the number of elements to permute.</haxe_doc>
		</quickPerm>
		<equals public="1" params="T" set="method" line="412" static="1">
			<f a="a:b">
				<c path="Array"><c path="equals.T"/></c>
				<c path="Array"><c path="equals.T"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the elements of `a` and `b` by using the equality operator (==).</haxe_doc>
		</equals>
		<split public="1" params="T" set="method" line="424" static="1">
			<f a="a:n:k">
				<c path="Array"><c path="split.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array"><c path="split.T"/></c></c>
			</f>
			<haxe_doc>Splits the input array `a` storing `n` elements into smaller chunks, each containing `k` elements.</haxe_doc>
		</split>
		<pairwise public="1" params="T" get="inline" set="null" line="448" static="1">
			<f a="input:visit">
				<c path="Array"><c path="pairwise.T"/></c>
				<f a="::">
					<x path="Int"/>
					<c path="pairwise.T"/>
					<c path="pairwise.T"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Visits all elements in `input` as a pair by calling `visit`.
		
		The function signature is: `visit(currentPairIndex, firstPairElement, secondPairElement)`
		
		Example:
			var points = [1.1, 1.2, 2.1, 2.2]; //format: [x0, y0, x1, y1, xn, yn, ...]
			ArrayTools.pairwise(points, function(i, x, y) trace('point x=$x, y=$y'));</haxe_doc>
		</pairwise>
		<_quickSort set="method" line="460" static="1"><f a="a:first:n:cmp">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<f a=":">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></_quickSort>
		<haxe_doc>Utility class for working with Arrays.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="de.polygonal.ds.tools.Assert" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/tools/Assert.hx"><haxe_doc>Assertion macro injecting assertion statements
	
	An assertion specifies a condition that you expect to be true at a point in your program.
	
	If that condition is not true, the assertion fails, throwing an instance of the `AssertError` class.</haxe_doc></class>
	<class path="de.polygonal.ds.tools.Bits" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/tools/Bits.hx">
		<mask public="1" get="inline" set="null" line="31" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Constructs a mask of `n` bits.</haxe_doc>
		</mask>
		<ones public="1" get="inline" set="null" line="41" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts the number of "1"-bits in `x`. For example 0b00110111 has 5 bits set.</haxe_doc>
		</ones>
		<ntz public="1" get="inline" set="null" line="54" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts the number of trailing 0's in `x`. For example 0b10000 has 4 trailing 0's.</haxe_doc>
		</ntz>
		<nlz public="1" get="inline" set="null" line="90" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts the number of leading 0's in `x`. For example 0b10000 has 27 leading 0's.</haxe_doc>
		</nlz>
		<msb public="1" get="inline" set="null" line="108" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the most significant bit of `x`.</haxe_doc>
		</msb>
		<rol public="1" get="inline" set="null" line="121" static="1">
			<f a="x:n">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotates the integer `x` by `n` places to the left.</haxe_doc>
		</rol>
		<ror public="1" get="inline" set="null" line="129" static="1">
			<f a="x:n">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotates the integer `x` by `n` places to the right.</haxe_doc>
		</ror>
		<reverse public="1" get="inline" set="null" line="137" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reverses `x`; For example 0b111000 becomes 0b000111.</haxe_doc>
		</reverse>
		<flipWORD public="1" get="inline" set="null" line="153" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Flips the bytes within the WORD `x` (2 bytes) to convert between little endian and big endian format.</haxe_doc>
		</flipWORD>
		<flipDWORD public="1" get="inline" set="null" line="161" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Flips the bytes within the DWORD `x` (4 bytes) to convert between little endian and big endian format.</haxe_doc>
		</flipDWORD>
		<haxe_doc>Helper class for working with bits</haxe_doc>
	</class>
	<class path="de.polygonal.ds.tools.GrowthRate" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/tools/GrowthRate.hx">
		<FIXED public="1" get="inline" set="null" line="28" static="1">
			<x path="Int"/>
			<haxe_doc>Fixed size; throws an error if additional space is requested.</haxe_doc>
		</FIXED>
		<MILD public="1" get="inline" set="null" line="33" static="1">
			<x path="Int"/>
			<haxe_doc>Grows at a rate of 1.125x plus a constant.</haxe_doc>
		</MILD>
		<NORMAL public="1" get="inline" set="null" line="38" static="1">
			<x path="Int"/>
			<haxe_doc>Grows at a rate of 1.5x (default value).</haxe_doc>
		</NORMAL>
		<DOUBLE public="1" get="inline" set="null" line="43" static="1">
			<x path="Int"/>
			<haxe_doc>Grows at a rate of 2.0x.</haxe_doc>
		</DOUBLE>
		<compute public="1" set="method" line="50" static="1">
			<f a="rate:capacity">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Computes a new capacity from the given growth `rate` constant and the current `capacity`.
		
		If `rate` > 0, `capacity` grows at a constant rate: `newCapacity = capacity + rate`]]></haxe_doc>
		</compute>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="de.polygonal.ds.tools.MathTools" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/tools/MathTools.hx" extern="1">
		<INT32_MIN public="1" get="inline" set="null" expr="0x80000000" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80000000</e></m></meta>
			<haxe_doc>Min value, signed integer.</haxe_doc>
		</INT32_MIN>
		<INT32_MAX public="1" get="inline" set="null" expr="0x7FFFFFFF" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x7FFFFFFF</e></m></meta>
			<haxe_doc>Max value, signed integer.</haxe_doc>
		</INT32_MAX>
		<INT16_MIN public="1" get="inline" set="null" expr="-0x8000" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-0x8000</e></m></meta>
			<haxe_doc>Min value, signed short.</haxe_doc>
		</INT16_MIN>
		<INT16_MAX public="1" get="inline" set="null" expr="0x7FFF" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x7FFF</e></m></meta>
			<haxe_doc>Max value, signed short.</haxe_doc>
		</INT16_MAX>
		<UINT16_MAX public="1" get="inline" set="null" expr="0xFFFF" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFF</e></m></meta>
			<haxe_doc>Max value, unsigned short.</haxe_doc>
		</UINT16_MAX>
		<isPow2 public="1" get="inline" set="null" line="58" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `x` is a power of two.</haxe_doc>
		</isPow2>
		<min public="1" get="inline" set="null" line="63" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns min(`x`, `y`).</haxe_doc>
		</min>
		<max public="1" get="inline" set="null" line="68" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns max(`x`, `y`).</haxe_doc>
		</max>
		<abs public="1" get="inline" set="null" line="73" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the absolute value of `x`.</haxe_doc>
		</abs>
		<nextPow2 public="1" get="inline" set="null" line="82" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the next highest power of 2 of `x`.
		
		`x` must be in the range 0...(2^30)
		
		Returns `x` if already a power of 2.</haxe_doc>
		</nextPow2>
		<numDigits public="1" get="inline" set="null" line="96" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts the number of digits in `x`, e.g. 1237.34 has 4 digits.</haxe_doc>
		</numDigits>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="de.polygonal.ds.tools.NativeArrayTools" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/tools/NativeArrayTools.hx">
		<alloc public="1" params="T" get="inline" set="null" line="32" static="1">
			<f a="len">
				<x path="Int"/>
				<t path="de.polygonal.ds.NativeArray"><c path="alloc.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Allocates an array with length `len`.</haxe_doc>
		</alloc>
		<get public="1" params="T" get="inline" set="null" line="69" static="1">
			<f a="src:index">
				<t path="de.polygonal.ds.NativeArray"><c path="get.T"/></t>
				<x path="Int"/>
				<c path="get.T"/>
			</f>
			<haxe_doc>Returns the value in `src` at `index`.</haxe_doc>
		</get>
		<set public="1" params="T" get="inline" set="null" line="91" static="1">
			<f a="dst:index:val">
				<t path="de.polygonal.ds.NativeArray"><c path="set.T"/></t>
				<x path="Int"/>
				<c path="set.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value in `src` at `index` to `val`.</haxe_doc>
		</set>
		<size public="1" params="T" get="inline" set="null" line="109" static="1">
			<f a="a">
				<t path="de.polygonal.ds.NativeArray"><c path="size.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the number of values in `a`.</haxe_doc>
		</size>
		<toArray public="1" params="T" set="method" line="130" static="1">
			<f a="src:first:len:dst">
				<t path="de.polygonal.ds.NativeArray"><c path="toArray.T"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="toArray.T"/></c>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc>Copies `n` elements from `src` beginning at `first` to `dst` and returns `dst`.</haxe_doc>
		</toArray>
		<ofArray public="1" params="T" get="inline" set="null" line="155" static="1">
			<f a="src">
				<c path="Array"><c path="ofArray.T"/></c>
				<t path="de.polygonal.ds.NativeArray"><c path="ofArray.T"/></t>
			</f>
			<haxe_doc>Returns a `NativeArray` object from the values stored in `src`.</haxe_doc>
		</ofArray>
		<blit public="1" params="T" get="inline" set="null" line="183" static="1">
			<f a="src:srcPos:dst:dstPos:n">
				<t path="de.polygonal.ds.NativeArray"><c path="blit.T"/></t>
				<x path="Int"/>
				<t path="de.polygonal.ds.NativeArray"><c path="blit.T"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Copies `n` elements from `src`, beginning at `srcPos` to `dst`, beginning at `dstPos`.
		
		Copying takes place as if an intermediate buffer was used, allowing the destination and source to overlap.</haxe_doc>
		</blit>
		<copy public="1" params="T" get="inline" set="null" line="250" static="1">
			<f a="src">
				<t path="de.polygonal.ds.NativeArray"><c path="copy.T"/></t>
				<t path="de.polygonal.ds.NativeArray"><c path="copy.T"/></t>
			</f>
			<haxe_doc>Returns a shallow copy of `src`.</haxe_doc>
		</copy>
		<zero public="1" params="T" set="method" line="278" static="1">
			<f a="dst:?first:?n">
				<t path="de.polygonal.ds.NativeArray"><c path="zero.T"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<t path="de.polygonal.ds.NativeArray"><c path="zero.T"/></t>
			</f>
			<haxe_doc>Sets `n` elements in `dst` to 0 starting at index `first` and returns `dst`.
		If `n` is 0, `n` is set to the length of `dst`.</haxe_doc>
		</zero>
		<init public="1" params="T" set="method" line="300" static="1">
			<f a="a:val:?first:?n">
				<t path="de.polygonal.ds.NativeArray"><c path="init.T"/></t>
				<c path="init.T"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="de.polygonal.ds.NativeArray"><c path="init.T"/></t>
			</f>
			<haxe_doc>Sets `n` elements in `a` to `val` starting at index `first` and returns `a`.
		If `n` is 0, `n` is set to the length of `a`.</haxe_doc>
		</init>
		<nullify public="1" params="T" set="method" line="316" static="1">
			<f a="a:?first:?n">
				<t path="de.polygonal.ds.NativeArray"><c path="nullify.T"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<t path="de.polygonal.ds.NativeArray"><c path="nullify.T"/></t>
			</f>
			<haxe_doc>Nullifies `n` elements in `a` starting at index `first` and returns `a`.
		If `n` is 0, `n` is set to the length of `a`.</haxe_doc>
		</nullify>
		<binarySearchCmp public="1" params="T" set="method" line="339" static="1">
			<f a="a:val:min:max:cmp">
				<t path="de.polygonal.ds.NativeArray"><c path="binarySearchCmp.T"/></t>
				<c path="binarySearchCmp.T"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a=":">
					<c path="binarySearchCmp.T"/>
					<c path="binarySearchCmp.T"/>
					<x path="Int"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Searches the sorted array `a` for `val` in the range [`min`, `max`] using the binary search algorithm.
		
		@return the array index storing `val` or the bitwise complement (~) of the index where `val` would be inserted (guaranteed to be a negative number).
		<br/>The insertion point is only valid for `min` = 0 and `max` = `a.length` - 1.]]></haxe_doc>
		</binarySearchCmp>
		<binarySearchf public="1" set="method" line="367" static="1">
			<f a="a:val:min:max">
				<t path="de.polygonal.ds.NativeArray"><x path="Float"/></t>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Searches the sorted array `a` for `val` in the range [`min`, `max`] using the binary search algorithm.
		@return the array index storing `val` or the bitwise complement (~) of the index where `val` would be inserted (guaranteed to be a negative number).
		<br/>The insertion point is only valid for `min` = 0 and `max` = `a.length` - 1.]]></haxe_doc>
		</binarySearchf>
		<binarySearchi public="1" set="method" line="394" static="1">
			<f a="a:val:min:max">
				<t path="de.polygonal.ds.NativeArray"><x path="Int"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Searches the sorted array `a` for `val` in the range [`min`, `max`] using the binary search algorithm.
		@return the array index storing `val` or the bitwise complement (~) of the index where `val` would be inserted (guaranteed to be a negative number).
		<br/>The insertion point is only valid for `min` = 0 and `max` = `a.length` - 1.]]></haxe_doc>
		</binarySearchi>
		<haxe_doc>Utility class for modifying `NativeArray` objects</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="de.polygonal.ds.tools.Shuffle" params="" file="/home/tom/.haxe_lib/polygonal-ds/2,0,1/src/de/polygonal/ds/tools/Shuffle.hx">
		<_f line="23" static="1"><f a=""><x path="Float"/></f></_f>
		<setRandom public="1" set="method" line="30" static="1">
			<f a="f">
				<f a=""><x path="Float"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Assign a function to generate random numbers in the interval [0, 1).
		
		Default implementation uses `Math.random()`.</haxe_doc>
		</setRandom>
		<frand public="1" get="inline" set="null" line="38" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a random real number in the interval [0,1).</haxe_doc>
		</frand>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.Function" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which
		* is public and
		* unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/usr/share/haxe/std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as has(EnumCtor). Otherwise
	Type.enumIndex() reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/usr/share/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/share/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/share/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/share/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/share/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<ucompare public="1" set="method" line="222" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
		<m n=":final"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/usr/share/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<ucompare public="1" set="method" line="222" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="haxe.Int64" params="" file="/usr/share/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/share/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<toString set="method" line="131" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<divMod public="1" set="method" line="169" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<high public="1" get="null" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<low public="1" get="null" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
		<m n=":final"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/usr/share/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<toString set="method" line="131" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<divMod public="1" set="method" line="169" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<high public="1" get="null" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<low public="1" get="null" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":final"/>
		</meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/share/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>* This typedef will fool @:coreApi into thinking that we are using
  * the same underlying type, even though it might be different on
  * specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/usr/share/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<new public="1" get="inline" set="null" line="459"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/share/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/share/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta>
	<m n=":keep"/>
	<m n=":final"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/usr/share/haxe/std/neko/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><d/></h>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/usr/share/haxe/std/neko/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><d/></h>
		<get public="1" get="inline" set="null" line="36">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<keys public="1" set="method" line="48">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/share/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="neko.NativeArray"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/share/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/share/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<meta>
		<m n=":keep"/>
		<m n=":final"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/usr/share/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="462" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</alloc>
		<ofData public="1" set="method" line="551" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<blit public="1" set="method" line="79">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<fill public="1" set="method" line="114"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/usr/share/haxe/std/haxe/io/BytesBuffer.hx">
		<b><d/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<getBytes public="1" set="method" line="191">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/share/haxe/std/haxe/io/BytesData.hx"><c path="neko.NativeString"/></typedef>
	<class path="haxe.io.Input" params="" file="/usr/share/haxe/std/haxe/io/Input.hx">
		<_float_of_bytes line="314" static="1"><unknown/></_float_of_bytes>
		<_double_of_bytes line="315" static="1"><unknown/></_double_of_bytes>
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<set_bigEndian set="method" line="95"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.BytesInput" params="" file="/usr/share/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<readByte public="1" set="method" line="90" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<new public="1" set="method" line="38"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/share/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<set_bigEndian set="method" line="96"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<writeInt32 public="1" set="method" line="223">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/usr/share/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<getBytes public="1" set="method" line="131">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Eof" params="" file="/usr/share/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/share/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="haxe.macro.Position" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Expr" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AnonType" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<expr set="method">
				<f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<x path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</x>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolve>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
				<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.3]]></e></m></meta>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<t path="Null"><t path="haxe.macro.MetaAccess"/></t>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TFunc" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/usr/share/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="neko.NativeString" params="" file="/usr/share/haxe/std/neko/NativeString.hx"><meta><m n=":keep"/></meta></class>
	<enum path="neko.vm.ThreadHandle" params="" file="/usr/share/haxe/std/neko/vm/Thread.hx" module="neko.vm.Thread"><meta><m n=":flatEnum"/></meta></enum>
	<class path="neko.vm.Thread" params="" file="/usr/share/haxe/std/neko/vm/Thread.hx">
		<create public="1" set="method" line="53" static="1">
			<f a="callb">
				<f a=""><x path="Void"/></f>
				<c path="neko.vm.Thread"/>
			</f>
			<haxe_doc>Creates a new thread that will execute the `callb` function, then exit.</haxe_doc>
		</create>
		<thread_create line="129" static="1">
			<f a=":">
				<f a="_">
					<unknown/>
					<x path="Void"/>
				</f>
				<unknown/>
				<e path="neko.vm.ThreadHandle"/>
			</f>
			<haxe_doc><![CDATA[Starts an OS message loop after [osInitialize] has been done.
		In that state, the UI handled by this thread will be updated and
		[sync] calls can be performed. The loop returns when [exitLoop] is
		called for this thread.
	**
	public static function osLoop() {
		if( os_loop == null ) throw "Please call osInitialize() first";
		os_loop();
	}

	/**
		The function [f] will be called by this thread if it's in [osLoop].
		[sync] returns immediately. See [osInitialize] remarks.
	**
	public function sync( f : Void -> Void ) {
		os_sync(handle,f);
	}

	/**
		The function [f] will be called by this thread and the calling thread
		will wait until the result is available then return its value.
	**
	public function syncResult<T>( f : Void -> T ) : T {
		if( this == current() )
			return f();
		var v = new neko.vm.Lock();
		var r = null;
		sync(function() {
			r = f();
			v.release();
		});
		v.wait();
		return r;
	}

	/**
		Exit from [osLoop].
	**
	public function exitLoop() {
		os_loop_stop(handle);
	}

	/**
		If you want to use the [osLoop], [sync] and [syncResult] methods, you
		need to call [osInitialize] before creating any thread or calling [current].
		This will load [os.ndll] library and initialize UI methods for each thread.
	**
	public static function osInitialize() {
		os_loop = neko.Lib.load("os","os_loop",0);
		os_loop_stop = neko.Lib.load("os","os_loop_stop",1);
		os_sync = neko.Lib.load("os","os_sync",2);
	}

	static var os_loop = null;
	static var os_loop_stop = null;
	static var os_sync = null;]]></haxe_doc>
		</thread_create>
		<handle><e path="neko.vm.ThreadHandle"/></handle>
		<__compare set="method" line="66">
			<f a="t">
				<a><handle set="null"><unknown/></handle></a>
				<unknown/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
		</__compare>
		<new set="method" line="31"><f a="h">
	<e path="neko.vm.ThreadHandle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="sys.FileStat" params="" file="/usr/share/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file's owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file's owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
</haxe>